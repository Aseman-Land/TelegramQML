import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -v -nonrelocatable TelegramQml 2.0 /home/bardia/Projects/build/telegramqml/Desktop_Qt_5_5_1_GCC_64bit/Debug'

Module {
    dependencies: []
    Component {
        name: "AccountAuthorizationsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/AccountAuthorizations 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AccountAuthorizationsClassType"
            values: {
                "TypeAccountAuthorizations": 0
            }
        }
        Property { name: "authorizations"; type: "QList<Authorization>" }
        Property { name: "core"; type: "AccountAuthorizations" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "AccountDaysTTLObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/AccountDaysTTL 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AccountDaysTTLClassType"
            values: {
                "TypeAccountDaysTTL": 0
            }
        }
        Property { name: "days"; type: "int" }
        Property { name: "core"; type: "AccountDaysTTL" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "AccountPasswordInputSettingsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/AccountPasswordInputSettings 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AccountPasswordInputSettingsClassType"
            values: {
                "TypeAccountPasswordInputSettings": 0
            }
        }
        Property { name: "email"; type: "string" }
        Property { name: "flags"; type: "int" }
        Property { name: "hint"; type: "string" }
        Property { name: "newPasswordHash"; type: "QByteArray" }
        Property { name: "newSalt"; type: "QByteArray" }
        Property { name: "core"; type: "AccountPasswordInputSettings" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "AccountPasswordObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/AccountPassword 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AccountPasswordClassType"
            values: {
                "TypeAccountNoPassword": 0,
                "TypeAccountPassword": 1
            }
        }
        Property { name: "currentSalt"; type: "QByteArray" }
        Property { name: "emailUnconfirmedPattern"; type: "string" }
        Property { name: "hasRecovery"; type: "bool" }
        Property { name: "hint"; type: "string" }
        Property { name: "newSalt"; type: "QByteArray" }
        Property { name: "core"; type: "AccountPassword" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "AccountPasswordSettingsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/AccountPasswordSettings 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AccountPasswordSettingsClassType"
            values: {
                "TypeAccountPasswordSettings": 0
            }
        }
        Property { name: "email"; type: "string" }
        Property { name: "core"; type: "AccountPasswordSettings" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "AccountPrivacyRulesObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/AccountPrivacyRules 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AccountPrivacyRulesClassType"
            values: {
                "TypeAccountPrivacyRules": 0
            }
        }
        Property { name: "rules"; type: "QList<PrivacyRule>" }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "AccountPrivacyRules" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "AuthAuthorizationObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/AuthAuthorization 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AuthAuthorizationClassType"
            values: {
                "TypeAuthAuthorization": 0
            }
        }
        Property { name: "flags"; type: "int" }
        Property { name: "tmpSessions"; type: "int" }
        Property { name: "user"; type: "UserObject"; isPointer: true }
        Property { name: "core"; type: "AuthAuthorization" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "AuthCheckedPhoneObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/AuthCheckedPhone 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AuthCheckedPhoneClassType"
            values: {
                "TypeAuthCheckedPhone": 0
            }
        }
        Property { name: "phoneRegistered"; type: "bool" }
        Property { name: "core"; type: "AuthCheckedPhone" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "AuthCodeTypeObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/AuthCodeType 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AuthCodeTypeClassType"
            values: {
                "TypeAuthCodeTypeSms": 0,
                "TypeAuthCodeTypeCall": 1,
                "TypeAuthCodeTypeFlashCall": 2
            }
        }
        Property { name: "core"; type: "AuthCodeType" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "AuthExportedAuthorizationObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/AuthExportedAuthorization 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AuthExportedAuthorizationClassType"
            values: {
                "TypeAuthExportedAuthorization": 0
            }
        }
        Property { name: "bytes"; type: "QByteArray" }
        Property { name: "id"; type: "int" }
        Property { name: "core"; type: "AuthExportedAuthorization" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "AuthPasswordRecoveryObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/AuthPasswordRecovery 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AuthPasswordRecoveryClassType"
            values: {
                "TypeAuthPasswordRecovery": 0
            }
        }
        Property { name: "emailPattern"; type: "string" }
        Property { name: "core"; type: "AuthPasswordRecovery" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "AuthSentCodeObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/AuthSentCode 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AuthSentCodeClassType"
            values: {
                "TypeAuthSentCode": 0
            }
        }
        Property { name: "flags"; type: "int" }
        Property { name: "nextType"; type: "AuthCodeTypeObject"; isPointer: true }
        Property { name: "phoneCodeHash"; type: "string" }
        Property { name: "phoneRegistered"; type: "bool" }
        Property { name: "timeout"; type: "int" }
        Property { name: "type"; type: "AuthSentCodeTypeObject"; isPointer: true }
        Property { name: "core"; type: "AuthSentCode" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "AuthSentCodeTypeObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/AuthSentCodeType 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AuthSentCodeTypeClassType"
            values: {
                "TypeAuthSentCodeTypeApp": 0,
                "TypeAuthSentCodeTypeSms": 1,
                "TypeAuthSentCodeTypeCall": 2,
                "TypeAuthSentCodeTypeFlashCall": 3
            }
        }
        Property { name: "length"; type: "int" }
        Property { name: "pattern"; type: "string" }
        Property { name: "core"; type: "AuthSentCodeType" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "AuthorizationObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/Authorization 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AuthorizationClassType"
            values: {
                "TypeAuthorization": 0
            }
        }
        Property { name: "apiId"; type: "int" }
        Property { name: "appName"; type: "string" }
        Property { name: "appVersion"; type: "string" }
        Property { name: "country"; type: "string" }
        Property { name: "dateActive"; type: "int" }
        Property { name: "dateCreated"; type: "int" }
        Property { name: "deviceModel"; type: "string" }
        Property { name: "flags"; type: "int" }
        Property { name: "hash"; type: "qlonglong" }
        Property { name: "ip"; type: "string" }
        Property { name: "platform"; type: "string" }
        Property { name: "region"; type: "string" }
        Property { name: "systemVersion"; type: "string" }
        Property { name: "core"; type: "Authorization" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "BotCommandObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/BotCommand 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "BotCommandClassType"
            values: {
                "TypeBotCommand": 0
            }
        }
        Property { name: "command"; type: "string" }
        Property { name: "description"; type: "string" }
        Property { name: "core"; type: "BotCommand" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "BotInfoObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/BotInfo 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "BotInfoClassType"
            values: {
                "TypeBotInfo": 0
            }
        }
        Property { name: "commands"; type: "QList<BotCommand>" }
        Property { name: "description"; type: "string" }
        Property { name: "userId"; type: "int" }
        Property { name: "core"; type: "BotInfo" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "BotInlineMessageObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/BotInlineMessage 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "BotInlineMessageClassType"
            values: {
                "TypeBotInlineMessageMediaAuto": 0,
                "TypeBotInlineMessageText": 1,
                "TypeBotInlineMessageMediaGeo": 2,
                "TypeBotInlineMessageMediaVenue": 3,
                "TypeBotInlineMessageMediaContact": 4
            }
        }
        Property { name: "address"; type: "string" }
        Property { name: "caption"; type: "string" }
        Property { name: "entities"; type: "QList<MessageEntity>" }
        Property { name: "firstName"; type: "string" }
        Property { name: "flags"; type: "int" }
        Property { name: "geo"; type: "GeoPointObject"; isPointer: true }
        Property { name: "lastName"; type: "string" }
        Property { name: "message"; type: "string" }
        Property { name: "noWebpage"; type: "bool" }
        Property { name: "phoneNumber"; type: "string" }
        Property { name: "provider"; type: "string" }
        Property { name: "replyMarkup"; type: "ReplyMarkupObject"; isPointer: true }
        Property { name: "title"; type: "string" }
        Property { name: "venueId"; type: "string" }
        Property { name: "core"; type: "BotInlineMessage" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "BotInlineResultObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/BotInlineResult 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "BotInlineResultClassType"
            values: {
                "TypeBotInlineResult": 0,
                "TypeBotInlineMediaResult": 1
            }
        }
        Property { name: "contentType"; type: "string" }
        Property { name: "contentUrl"; type: "string" }
        Property { name: "description"; type: "string" }
        Property { name: "document"; type: "DocumentObject"; isPointer: true }
        Property { name: "duration"; type: "int" }
        Property { name: "flags"; type: "int" }
        Property { name: "h"; type: "int" }
        Property { name: "id"; type: "string" }
        Property { name: "photo"; type: "PhotoObject"; isPointer: true }
        Property { name: "sendMessage"; type: "BotInlineMessageObject"; isPointer: true }
        Property { name: "thumbUrl"; type: "string" }
        Property { name: "title"; type: "string" }
        Property { name: "type"; type: "string" }
        Property { name: "url"; type: "string" }
        Property { name: "w"; type: "int" }
        Property { name: "core"; type: "BotInlineResult" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ChannelMessagesFilterObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ChannelMessagesFilter 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ChannelMessagesFilterClassType"
            values: {
                "TypeChannelMessagesFilterEmpty": 0,
                "TypeChannelMessagesFilter": 1
            }
        }
        Property { name: "excludeNewMessages"; type: "bool" }
        Property { name: "flags"; type: "int" }
        Property { name: "ranges"; type: "QList<MessageRange>" }
        Property { name: "core"; type: "ChannelMessagesFilter" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ChannelParticipantObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ChannelParticipant 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ChannelParticipantClassType"
            values: {
                "TypeChannelParticipant": 0,
                "TypeChannelParticipantSelf": 1,
                "TypeChannelParticipantModerator": 2,
                "TypeChannelParticipantEditor": 3,
                "TypeChannelParticipantKicked": 4,
                "TypeChannelParticipantCreator": 5
            }
        }
        Property { name: "date"; type: "int" }
        Property { name: "inviterId"; type: "int" }
        Property { name: "kickedBy"; type: "int" }
        Property { name: "userId"; type: "int" }
        Property { name: "core"; type: "ChannelParticipant" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ChannelParticipantRoleObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ChannelParticipantRole 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ChannelParticipantRoleClassType"
            values: {
                "TypeChannelRoleEmpty": 0,
                "TypeChannelRoleModerator": 1,
                "TypeChannelRoleEditor": 2
            }
        }
        Property { name: "core"; type: "ChannelParticipantRole" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ChannelParticipantsFilterObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ChannelParticipantsFilter 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ChannelParticipantsFilterClassType"
            values: {
                "TypeChannelParticipantsRecent": 0,
                "TypeChannelParticipantsAdmins": 1,
                "TypeChannelParticipantsKicked": 2,
                "TypeChannelParticipantsBots": 3
            }
        }
        Property { name: "core"; type: "ChannelParticipantsFilter" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ChannelsChannelParticipantObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ChannelsChannelParticipant 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ChannelsChannelParticipantClassType"
            values: {
                "TypeChannelsChannelParticipant": 0
            }
        }
        Property { name: "participant"; type: "ChannelParticipantObject"; isPointer: true }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "ChannelsChannelParticipant" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ChannelsChannelParticipantsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ChannelsChannelParticipants 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ChannelsChannelParticipantsClassType"
            values: {
                "TypeChannelsChannelParticipants": 0
            }
        }
        Property { name: "count"; type: "int" }
        Property { name: "participants"; type: "QList<ChannelParticipant>" }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "ChannelsChannelParticipants" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ChatFullObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ChatFull 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ChatFullClassType"
            values: {
                "TypeChatFull": 0,
                "TypeChannelFull": 1
            }
        }
        Property { name: "about"; type: "string" }
        Property { name: "adminsCount"; type: "int" }
        Property { name: "botInfo"; type: "QList<BotInfo>" }
        Property { name: "canSetUsername"; type: "bool" }
        Property { name: "canViewParticipants"; type: "bool" }
        Property { name: "chatPhoto"; type: "PhotoObject"; isPointer: true }
        Property { name: "exportedInvite"; type: "ExportedChatInviteObject"; isPointer: true }
        Property { name: "flags"; type: "int" }
        Property { name: "id"; type: "int" }
        Property { name: "kickedCount"; type: "int" }
        Property { name: "migratedFromChatId"; type: "int" }
        Property { name: "migratedFromMaxId"; type: "int" }
        Property { name: "notifySettings"; type: "PeerNotifySettingsObject"; isPointer: true }
        Property { name: "participants"; type: "ChatParticipantsObject"; isPointer: true }
        Property { name: "participantsCount"; type: "int" }
        Property { name: "pinnedMsgId"; type: "int" }
        Property { name: "readInboxMaxId"; type: "int" }
        Property { name: "readOutboxMaxId"; type: "int" }
        Property { name: "unreadCount"; type: "int" }
        Property { name: "core"; type: "ChatFull" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ChatInviteObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ChatInvite 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ChatInviteClassType"
            values: {
                "TypeChatInviteAlready": 0,
                "TypeChatInvite": 1
            }
        }
        Property { name: "broadcast"; type: "bool" }
        Property { name: "channel"; type: "bool" }
        Property { name: "chat"; type: "ChatObject"; isPointer: true }
        Property { name: "flags"; type: "int" }
        Property { name: "megagroup"; type: "bool" }
        Property { name: "participants"; type: "QList<User>" }
        Property { name: "participantsCount"; type: "int" }
        Property { name: "photo"; type: "ChatPhotoObject"; isPointer: true }
        Property { name: "publicValue"; type: "bool" }
        Property { name: "title"; type: "string" }
        Property { name: "core"; type: "ChatInvite" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ChatObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/Chat 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ChatClassType"
            values: {
                "TypeChatEmpty": 0,
                "TypeChat": 1,
                "TypeChatForbidden": 2,
                "TypeChannel": 3,
                "TypeChannelForbidden": 4
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "admin"; type: "bool" }
        Property { name: "adminsEnabled"; type: "bool" }
        Property { name: "broadcast"; type: "bool" }
        Property { name: "creator"; type: "bool" }
        Property { name: "date"; type: "int" }
        Property { name: "deactivated"; type: "bool" }
        Property { name: "democracy"; type: "bool" }
        Property { name: "editor"; type: "bool" }
        Property { name: "flags"; type: "int" }
        Property { name: "id"; type: "int" }
        Property { name: "kicked"; type: "bool" }
        Property { name: "left"; type: "bool" }
        Property { name: "megagroup"; type: "bool" }
        Property { name: "migratedTo"; type: "InputChannelObject"; isPointer: true }
        Property { name: "min"; type: "bool" }
        Property { name: "moderator"; type: "bool" }
        Property { name: "participantsCount"; type: "int" }
        Property { name: "photo"; type: "ChatPhotoObject"; isPointer: true }
        Property { name: "restricted"; type: "bool" }
        Property { name: "restrictionReason"; type: "string" }
        Property { name: "signatures"; type: "bool" }
        Property { name: "title"; type: "string" }
        Property { name: "username"; type: "string" }
        Property { name: "verified"; type: "bool" }
        Property { name: "version"; type: "int" }
        Property { name: "core"; type: "Chat" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ChatParticipantObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ChatParticipant 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ChatParticipantClassType"
            values: {
                "TypeChatParticipant": 0,
                "TypeChatParticipantCreator": 1,
                "TypeChatParticipantAdmin": 2
            }
        }
        Property { name: "date"; type: "int" }
        Property { name: "inviterId"; type: "int" }
        Property { name: "userId"; type: "int" }
        Property { name: "core"; type: "ChatParticipant" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ChatParticipantsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ChatParticipants 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ChatParticipantsClassType"
            values: {
                "TypeChatParticipantsForbidden": 0,
                "TypeChatParticipants": 1
            }
        }
        Property { name: "chatId"; type: "int" }
        Property { name: "flags"; type: "int" }
        Property { name: "participants"; type: "QList<ChatParticipant>" }
        Property { name: "selfParticipant"; type: "ChatParticipantObject"; isPointer: true }
        Property { name: "version"; type: "int" }
        Property { name: "core"; type: "ChatParticipants" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ChatPhotoObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ChatPhoto 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ChatPhotoClassType"
            values: {
                "TypeChatPhotoEmpty": 0,
                "TypeChatPhoto": 1
            }
        }
        Property { name: "photoBig"; type: "FileLocationObject"; isPointer: true }
        Property { name: "photoSmall"; type: "FileLocationObject"; isPointer: true }
        Property { name: "core"; type: "ChatPhoto" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ConfigObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/Config 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ConfigClassType"
            values: {
                "TypeConfig": 0
            }
        }
        Property { name: "chatBigSize"; type: "int" }
        Property { name: "chatSizeMax"; type: "int" }
        Property { name: "date"; type: "int" }
        Property { name: "dcOptions"; type: "QList<DcOption>" }
        Property { name: "disabledFeatures"; type: "QList<DisabledFeature>" }
        Property { name: "editTimeLimit"; type: "int" }
        Property { name: "expires"; type: "int" }
        Property { name: "flags"; type: "int" }
        Property { name: "forwardedCountMax"; type: "int" }
        Property { name: "megagroupSizeMax"; type: "int" }
        Property { name: "notifyCloudDelayMs"; type: "int" }
        Property { name: "notifyDefaultDelayMs"; type: "int" }
        Property { name: "offlineBlurTimeoutMs"; type: "int" }
        Property { name: "offlineIdleTimeoutMs"; type: "int" }
        Property { name: "onlineCloudTimeoutMs"; type: "int" }
        Property { name: "onlineUpdatePeriodMs"; type: "int" }
        Property { name: "pushChatLimit"; type: "int" }
        Property { name: "pushChatPeriodMs"; type: "int" }
        Property { name: "ratingEDecay"; type: "int" }
        Property { name: "savedGifsLimit"; type: "int" }
        Property { name: "stickersRecentLimit"; type: "int" }
        Property { name: "testMode"; type: "bool" }
        Property { name: "thisDc"; type: "int" }
        Property { name: "tmpSessions"; type: "int" }
        Property { name: "core"; type: "Config" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ContactBlockedObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ContactBlocked 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContactBlockedClassType"
            values: {
                "TypeContactBlocked": 0
            }
        }
        Property { name: "date"; type: "int" }
        Property { name: "userId"; type: "int" }
        Property { name: "core"; type: "ContactBlocked" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ContactLinkObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ContactLink 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContactLinkClassType"
            values: {
                "TypeContactLinkUnknown": 0,
                "TypeContactLinkNone": 1,
                "TypeContactLinkHasPhone": 2,
                "TypeContactLinkContact": 3
            }
        }
        Property { name: "core"; type: "ContactLink" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ContactObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/Contact 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContactClassType"
            values: {
                "TypeContact": 0
            }
        }
        Property { name: "mutual"; type: "bool" }
        Property { name: "userId"; type: "int" }
        Property { name: "core"; type: "Contact" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ContactStatusObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ContactStatus 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContactStatusClassType"
            values: {
                "TypeContactStatus": 0
            }
        }
        Property { name: "status"; type: "UserStatusObject"; isPointer: true }
        Property { name: "userId"; type: "int" }
        Property { name: "core"; type: "ContactStatus" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ContactsBlockedObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ContactsBlocked 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContactsBlockedClassType"
            values: {
                "TypeContactsBlocked": 0,
                "TypeContactsBlockedSlice": 1
            }
        }
        Property { name: "blocked"; type: "QList<ContactBlocked>" }
        Property { name: "count"; type: "int" }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "ContactsBlocked" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ContactsContactsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ContactsContacts 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContactsContactsClassType"
            values: {
                "TypeContactsContactsNotModified": 0,
                "TypeContactsContacts": 1
            }
        }
        Property { name: "contacts"; type: "QList<Contact>" }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "ContactsContacts" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ContactsFoundObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ContactsFound 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContactsFoundClassType"
            values: {
                "TypeContactsFound": 0
            }
        }
        Property { name: "chats"; type: "QList<Chat>" }
        Property { name: "results"; type: "QList<Peer>" }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "ContactsFound" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ContactsImportedContactsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ContactsImportedContacts 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContactsImportedContactsClassType"
            values: {
                "TypeContactsImportedContacts": 0
            }
        }
        Property { name: "imported"; type: "QList<ImportedContact>" }
        Property { name: "retryContacts"; type: "QList<qint64>" }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "ContactsImportedContacts" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ContactsLinkObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ContactsLink 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContactsLinkClassType"
            values: {
                "TypeContactsLink": 0
            }
        }
        Property { name: "foreignLink"; type: "ContactLinkObject"; isPointer: true }
        Property { name: "myLink"; type: "ContactLinkObject"; isPointer: true }
        Property { name: "user"; type: "UserObject"; isPointer: true }
        Property { name: "core"; type: "ContactsLink" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ContactsResolvedPeerObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ContactsResolvedPeer 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContactsResolvedPeerClassType"
            values: {
                "TypeContactsResolvedPeer": 0
            }
        }
        Property { name: "chats"; type: "QList<Chat>" }
        Property { name: "peer"; type: "PeerObject"; isPointer: true }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "ContactsResolvedPeer" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ContactsTopPeersObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ContactsTopPeers 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContactsTopPeersClassType"
            values: {
                "TypeContactsTopPeersNotModified": 0,
                "TypeContactsTopPeers": 1
            }
        }
        Property { name: "categories"; type: "QList<TopPeerCategoryPeers>" }
        Property { name: "chats"; type: "QList<Chat>" }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "ContactsTopPeers" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "DcOptionObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/DcOption 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DcOptionClassType"
            values: {
                "TypeDcOption": 0
            }
        }
        Property { name: "flags"; type: "int" }
        Property { name: "id"; type: "int" }
        Property { name: "ipAddress"; type: "string" }
        Property { name: "ipv6"; type: "bool" }
        Property { name: "mediaOnly"; type: "bool" }
        Property { name: "port"; type: "int" }
        Property { name: "tcpoOnly"; type: "bool" }
        Property { name: "core"; type: "DcOption" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "DecryptedMessageActionObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/DecryptedMessageAction 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DecryptedMessageActionClassType"
            values: {
                "TypeDecryptedMessageActionSetMessageTTLSecret8": 0,
                "TypeDecryptedMessageActionReadMessagesSecret8": 1,
                "TypeDecryptedMessageActionDeleteMessagesSecret8": 2,
                "TypeDecryptedMessageActionScreenshotMessagesSecret8": 3,
                "TypeDecryptedMessageActionFlushHistorySecret8": 4,
                "TypeDecryptedMessageActionResendSecret17": 5,
                "TypeDecryptedMessageActionNotifyLayerSecret17": 6,
                "TypeDecryptedMessageActionTypingSecret17": 7,
                "TypeDecryptedMessageActionRequestKeySecret20": 8,
                "TypeDecryptedMessageActionAcceptKeySecret20": 9,
                "TypeDecryptedMessageActionAbortKeySecret20": 10,
                "TypeDecryptedMessageActionCommitKeySecret20": 11,
                "TypeDecryptedMessageActionNoopSecret20": 12
            }
        }
        Property { name: "action"; type: "SendMessageActionObject"; isPointer: true }
        Property { name: "endSeqNo"; type: "int" }
        Property { name: "exchangeId"; type: "qlonglong" }
        Property { name: "gA"; type: "QByteArray" }
        Property { name: "gB"; type: "QByteArray" }
        Property { name: "keyFingerprint"; type: "qlonglong" }
        Property { name: "layer"; type: "int" }
        Property { name: "randomIds"; type: "QList<qint64>" }
        Property { name: "startSeqNo"; type: "int" }
        Property { name: "ttlSeconds"; type: "int" }
        Property { name: "core"; type: "DecryptedMessageAction" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "DecryptedMessageLayerObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/DecryptedMessageLayer 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DecryptedMessageLayerClassType"
            values: {
                "TypeDecryptedMessageLayerSecret17": 0
            }
        }
        Property { name: "inSeqNo"; type: "int" }
        Property { name: "layer"; type: "int" }
        Property { name: "message"; type: "DecryptedMessageObject"; isPointer: true }
        Property { name: "outSeqNo"; type: "int" }
        Property { name: "randomBytes"; type: "QByteArray" }
        Property { name: "core"; type: "DecryptedMessageLayer" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "DecryptedMessageMediaObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/DecryptedMessageMedia 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DecryptedMessageMediaClassType"
            values: {
                "TypeDecryptedMessageMediaEmptySecret8": 0,
                "TypeDecryptedMessageMediaPhotoSecret8": 1,
                "TypeDecryptedMessageMediaVideoSecret8": 2,
                "TypeDecryptedMessageMediaGeoPointSecret8": 3,
                "TypeDecryptedMessageMediaContactSecret8": 4,
                "TypeDecryptedMessageMediaDocumentSecret8": 5,
                "TypeDecryptedMessageMediaAudioSecret8": 6,
                "TypeDecryptedMessageMediaVideoSecret17": 7,
                "TypeDecryptedMessageMediaAudioSecret17": 8,
                "TypeDecryptedMessageMediaExternalDocumentSecret23": 9
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "attributes"; type: "QList<DocumentAttribute>" }
        Property { name: "date"; type: "int" }
        Property { name: "dcId"; type: "int" }
        Property { name: "duration"; type: "int" }
        Property { name: "fileName"; type: "string" }
        Property { name: "firstName"; type: "string" }
        Property { name: "h"; type: "int" }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "iv"; type: "QByteArray" }
        Property { name: "key"; type: "QByteArray" }
        Property { name: "lastName"; type: "string" }
        Property { name: "lat"; type: "double" }
        Property { name: "longValue"; type: "double" }
        Property { name: "mimeType"; type: "string" }
        Property { name: "phoneNumber"; type: "string" }
        Property { name: "size"; type: "int" }
        Property { name: "thumbPhotoSize"; type: "PhotoSizeObject"; isPointer: true }
        Property { name: "thumbBytes"; type: "QByteArray" }
        Property { name: "thumbH"; type: "int" }
        Property { name: "thumbW"; type: "int" }
        Property { name: "userId"; type: "int" }
        Property { name: "w"; type: "int" }
        Property { name: "core"; type: "DecryptedMessageMedia" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "DecryptedMessageObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/DecryptedMessage 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DecryptedMessageClassType"
            values: {
                "TypeDecryptedMessageSecret8": 0,
                "TypeDecryptedMessageServiceSecret8": 1,
                "TypeDecryptedMessageSecret17": 2,
                "TypeDecryptedMessageServiceSecret17": 3
            }
        }
        Property { name: "action"; type: "DecryptedMessageActionObject"; isPointer: true }
        Property { name: "media"; type: "DecryptedMessageMediaObject"; isPointer: true }
        Property { name: "message"; type: "string" }
        Property { name: "randomBytes"; type: "QByteArray" }
        Property { name: "randomId"; type: "qlonglong" }
        Property { name: "ttl"; type: "int" }
        Property { name: "core"; type: "DecryptedMessage" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "DialogObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/Dialog 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DialogClassType"
            values: {
                "TypeDialog": 0
            }
        }
        Property { name: "draft"; type: "DraftMessageObject"; isPointer: true }
        Property { name: "flags"; type: "int" }
        Property { name: "notifySettings"; type: "PeerNotifySettingsObject"; isPointer: true }
        Property { name: "peer"; type: "PeerObject"; isPointer: true }
        Property { name: "pts"; type: "int" }
        Property { name: "readInboxMaxId"; type: "int" }
        Property { name: "readOutboxMaxId"; type: "int" }
        Property { name: "topMessage"; type: "int" }
        Property { name: "unreadCount"; type: "int" }
        Property { name: "core"; type: "Dialog" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "DisabledFeatureObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/DisabledFeature 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DisabledFeatureClassType"
            values: {
                "TypeDisabledFeature": 0
            }
        }
        Property { name: "description"; type: "string" }
        Property { name: "feature"; type: "string" }
        Property { name: "core"; type: "DisabledFeature" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "DocumentAttributeObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/DocumentAttribute 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DocumentAttributeClassType"
            values: {
                "TypeDocumentAttributeImageSize": 0,
                "TypeDocumentAttributeAnimated": 1,
                "TypeDocumentAttributeSticker": 2,
                "TypeDocumentAttributeVideo": 3,
                "TypeDocumentAttributeAudio": 4,
                "TypeDocumentAttributeFilename": 5,
                "TypeDocumentAttributeHasStickers": 6,
                "TypeDocumentAttributeImageSizeSecret23": 7,
                "TypeDocumentAttributeAnimatedSecret23": 8,
                "TypeDocumentAttributeStickerSecret23": 9,
                "TypeDocumentAttributeVideoSecret23": 10,
                "TypeDocumentAttributeAudioSecret23": 11,
                "TypeDocumentAttributeFilenameSecret23": 12
            }
        }
        Property { name: "alt"; type: "string" }
        Property { name: "duration"; type: "int" }
        Property { name: "fileName"; type: "string" }
        Property { name: "flags"; type: "int" }
        Property { name: "h"; type: "int" }
        Property { name: "mask"; type: "bool" }
        Property { name: "maskCoords"; type: "MaskCoordsObject"; isPointer: true }
        Property { name: "performer"; type: "string" }
        Property { name: "stickerset"; type: "InputStickerSetObject"; isPointer: true }
        Property { name: "title"; type: "string" }
        Property { name: "voice"; type: "bool" }
        Property { name: "w"; type: "int" }
        Property { name: "waveform"; type: "QByteArray" }
        Property { name: "core"; type: "DocumentAttribute" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "DocumentObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/Document 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DocumentClassType"
            values: {
                "TypeDocumentEmpty": 0,
                "TypeDocument": 1
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "attributes"; type: "QList<DocumentAttribute>" }
        Property { name: "date"; type: "int" }
        Property { name: "dcId"; type: "int" }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "mimeType"; type: "string" }
        Property { name: "size"; type: "int" }
        Property { name: "thumb"; type: "PhotoSizeObject"; isPointer: true }
        Property { name: "version"; type: "int" }
        Property { name: "core"; type: "Document" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "DraftMessageObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/DraftMessage 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DraftMessageClassType"
            values: {
                "TypeDraftMessageEmpty": 0,
                "TypeDraftMessage": 1
            }
        }
        Property { name: "date"; type: "int" }
        Property { name: "entities"; type: "QList<MessageEntity>" }
        Property { name: "flags"; type: "int" }
        Property { name: "message"; type: "string" }
        Property { name: "noWebpage"; type: "bool" }
        Property { name: "replyToMsgId"; type: "int" }
        Property { name: "core"; type: "DraftMessage" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "EncryptedChatObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/EncryptedChat 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "EncryptedChatClassType"
            values: {
                "TypeEncryptedChatEmpty": 0,
                "TypeEncryptedChatWaiting": 1,
                "TypeEncryptedChatRequested": 2,
                "TypeEncryptedChat": 3,
                "TypeEncryptedChatDiscarded": 4
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "adminId"; type: "int" }
        Property { name: "date"; type: "int" }
        Property { name: "gA"; type: "QByteArray" }
        Property { name: "gAOrB"; type: "QByteArray" }
        Property { name: "id"; type: "int" }
        Property { name: "keyFingerprint"; type: "qlonglong" }
        Property { name: "participantId"; type: "int" }
        Property { name: "core"; type: "EncryptedChat" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "EncryptedFileObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/EncryptedFile 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "EncryptedFileClassType"
            values: {
                "TypeEncryptedFileEmpty": 0,
                "TypeEncryptedFile": 1
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "dcId"; type: "int" }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "keyFingerprint"; type: "int" }
        Property { name: "size"; type: "int" }
        Property { name: "core"; type: "EncryptedFile" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "EncryptedMessageObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/EncryptedMessage 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "EncryptedMessageClassType"
            values: {
                "TypeEncryptedMessage": 0,
                "TypeEncryptedMessageService": 1
            }
        }
        Property { name: "bytes"; type: "QByteArray" }
        Property { name: "chatId"; type: "int" }
        Property { name: "date"; type: "int" }
        Property { name: "file"; type: "EncryptedFileObject"; isPointer: true }
        Property { name: "randomId"; type: "qlonglong" }
        Property { name: "core"; type: "EncryptedMessage" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ExportedChatInviteObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ExportedChatInvite 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ExportedChatInviteClassType"
            values: {
                "TypeChatInviteEmpty": 0,
                "TypeChatInviteExported": 1
            }
        }
        Property { name: "link"; type: "string" }
        Property { name: "core"; type: "ExportedChatInvite" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ExportedMessageLinkObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ExportedMessageLink 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ExportedMessageLinkClassType"
            values: {
                "TypeExportedMessageLink": 0
            }
        }
        Property { name: "link"; type: "string" }
        Property { name: "core"; type: "ExportedMessageLink" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "FileLocationObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/FileLocation 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FileLocationClassType"
            values: {
                "TypeFileLocationUnavailable": 0,
                "TypeFileLocation": 1,
                "TypeFileLocationUnavailableSecret23": 2,
                "TypeFileLocationSecret23": 3
            }
        }
        Property { name: "dcId"; type: "int" }
        Property { name: "localId"; type: "int" }
        Property { name: "secret"; type: "qlonglong" }
        Property { name: "volumeId"; type: "qlonglong" }
        Property { name: "core"; type: "FileLocation" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "FoundGifObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/FoundGif 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FoundGifClassType"
            values: {
                "TypeFoundGif": 0,
                "TypeFoundGifCached": 1
            }
        }
        Property { name: "contentType"; type: "string" }
        Property { name: "contentUrl"; type: "string" }
        Property { name: "document"; type: "DocumentObject"; isPointer: true }
        Property { name: "h"; type: "int" }
        Property { name: "photo"; type: "PhotoObject"; isPointer: true }
        Property { name: "thumbUrl"; type: "string" }
        Property { name: "url"; type: "string" }
        Property { name: "w"; type: "int" }
        Property { name: "core"; type: "FoundGif" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "GameObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/Game 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "GameClassType"
            values: {
                "TypeGame": 0
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "description"; type: "string" }
        Property { name: "document"; type: "DocumentObject"; isPointer: true }
        Property { name: "flags"; type: "int" }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "photo"; type: "PhotoObject"; isPointer: true }
        Property { name: "shortName"; type: "string" }
        Property { name: "title"; type: "string" }
        Property { name: "core"; type: "Game" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "GeoPointObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/GeoPoint 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "GeoPointClassType"
            values: {
                "TypeGeoPointEmpty": 0,
                "TypeGeoPoint": 1
            }
        }
        Property { name: "lat"; type: "double" }
        Property { name: "longValue"; type: "double" }
        Property { name: "core"; type: "GeoPoint" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "HelpAppChangelogObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/HelpAppChangelog 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "HelpAppChangelogClassType"
            values: {
                "TypeHelpAppChangelogEmpty": 0,
                "TypeHelpAppChangelog": 1
            }
        }
        Property { name: "text"; type: "string" }
        Property { name: "core"; type: "HelpAppChangelog" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "HelpAppUpdateObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/HelpAppUpdate 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "HelpAppUpdateClassType"
            values: {
                "TypeHelpAppUpdate": 0,
                "TypeHelpNoAppUpdate": 1
            }
        }
        Property { name: "critical"; type: "bool" }
        Property { name: "id"; type: "int" }
        Property { name: "text"; type: "string" }
        Property { name: "url"; type: "string" }
        Property { name: "core"; type: "HelpAppUpdate" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "HelpInviteTextObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/HelpInviteText 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "HelpInviteTextClassType"
            values: {
                "TypeHelpInviteText": 0
            }
        }
        Property { name: "message"; type: "string" }
        Property { name: "core"; type: "HelpInviteText" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "HelpSupportObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/HelpSupport 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "HelpSupportClassType"
            values: {
                "TypeHelpSupport": 0
            }
        }
        Property { name: "phoneNumber"; type: "string" }
        Property { name: "user"; type: "UserObject"; isPointer: true }
        Property { name: "core"; type: "HelpSupport" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "HelpTermsOfServiceObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/HelpTermsOfService 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "HelpTermsOfServiceClassType"
            values: {
                "TypeHelpTermsOfService": 0
            }
        }
        Property { name: "text"; type: "string" }
        Property { name: "core"; type: "HelpTermsOfService" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "HighScoreObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/HighScore 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "HighScoreClassType"
            values: {
                "TypeHighScore": 0
            }
        }
        Property { name: "pos"; type: "int" }
        Property { name: "score"; type: "int" }
        Property { name: "userId"; type: "int" }
        Property { name: "core"; type: "HighScore" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ImportedContactObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ImportedContact 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ImportedContactClassType"
            values: {
                "TypeImportedContact": 0
            }
        }
        Property { name: "clientId"; type: "qlonglong" }
        Property { name: "userId"; type: "int" }
        Property { name: "core"; type: "ImportedContact" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InlineBotSwitchPMObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InlineBotSwitchPM 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InlineBotSwitchPMClassType"
            values: {
                "TypeInlineBotSwitchPM": 0
            }
        }
        Property { name: "startParam"; type: "string" }
        Property { name: "text"; type: "string" }
        Property { name: "core"; type: "InlineBotSwitchPM" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputAppEventObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputAppEvent 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputAppEventClassType"
            values: {
                "TypeInputAppEvent": 0
            }
        }
        Property { name: "data"; type: "string" }
        Property { name: "peer"; type: "qlonglong" }
        Property { name: "time"; type: "double" }
        Property { name: "type"; type: "string" }
        Property { name: "core"; type: "InputAppEvent" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputBotInlineMessageIDObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputBotInlineMessageID 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputBotInlineMessageIDClassType"
            values: {
                "TypeInputBotInlineMessageID": 0
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "dcId"; type: "int" }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "core"; type: "InputBotInlineMessageID" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputBotInlineMessageObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputBotInlineMessage 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputBotInlineMessageClassType"
            values: {
                "TypeInputBotInlineMessageMediaAuto": 0,
                "TypeInputBotInlineMessageText": 1,
                "TypeInputBotInlineMessageMediaGeo": 2,
                "TypeInputBotInlineMessageMediaVenue": 3,
                "TypeInputBotInlineMessageMediaContact": 4,
                "TypeInputBotInlineMessageGame": 5
            }
        }
        Property { name: "address"; type: "string" }
        Property { name: "caption"; type: "string" }
        Property { name: "entities"; type: "QList<MessageEntity>" }
        Property { name: "firstName"; type: "string" }
        Property { name: "flags"; type: "int" }
        Property { name: "geoPoint"; type: "InputGeoPointObject"; isPointer: true }
        Property { name: "lastName"; type: "string" }
        Property { name: "message"; type: "string" }
        Property { name: "noWebpage"; type: "bool" }
        Property { name: "phoneNumber"; type: "string" }
        Property { name: "provider"; type: "string" }
        Property { name: "replyMarkup"; type: "ReplyMarkupObject"; isPointer: true }
        Property { name: "title"; type: "string" }
        Property { name: "venueId"; type: "string" }
        Property { name: "core"; type: "InputBotInlineMessage" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputBotInlineResultObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputBotInlineResult 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputBotInlineResultClassType"
            values: {
                "TypeInputBotInlineResult": 0,
                "TypeInputBotInlineResultPhoto": 1,
                "TypeInputBotInlineResultDocument": 2,
                "TypeInputBotInlineResultGame": 3
            }
        }
        Property { name: "contentType"; type: "string" }
        Property { name: "contentUrl"; type: "string" }
        Property { name: "description"; type: "string" }
        Property { name: "document"; type: "InputDocumentObject"; isPointer: true }
        Property { name: "duration"; type: "int" }
        Property { name: "flags"; type: "int" }
        Property { name: "h"; type: "int" }
        Property { name: "id"; type: "string" }
        Property { name: "photo"; type: "InputPhotoObject"; isPointer: true }
        Property { name: "sendMessage"; type: "InputBotInlineMessageObject"; isPointer: true }
        Property { name: "shortName"; type: "string" }
        Property { name: "thumbUrl"; type: "string" }
        Property { name: "title"; type: "string" }
        Property { name: "type"; type: "string" }
        Property { name: "url"; type: "string" }
        Property { name: "w"; type: "int" }
        Property { name: "core"; type: "InputBotInlineResult" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputChannelObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputChannel 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputChannelClassType"
            values: {
                "TypeInputChannelEmpty": 0,
                "TypeInputChannel": 1
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "channelId"; type: "int" }
        Property { name: "core"; type: "InputChannel" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputChatPhotoObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputChatPhoto 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputChatPhotoClassType"
            values: {
                "TypeInputChatPhotoEmpty": 0,
                "TypeInputChatUploadedPhoto": 1,
                "TypeInputChatPhoto": 2
            }
        }
        Property { name: "file"; type: "InputFileObject"; isPointer: true }
        Property { name: "id"; type: "InputPhotoObject"; isPointer: true }
        Property { name: "core"; type: "InputChatPhoto" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputContactObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputContact 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputContactClassType"
            values: {
                "TypeInputPhoneContact": 0
            }
        }
        Property { name: "clientId"; type: "qlonglong" }
        Property { name: "firstName"; type: "string" }
        Property { name: "lastName"; type: "string" }
        Property { name: "phone"; type: "string" }
        Property { name: "core"; type: "InputContact" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputDocumentObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputDocument 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputDocumentClassType"
            values: {
                "TypeInputDocumentEmpty": 0,
                "TypeInputDocument": 1
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "core"; type: "InputDocument" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputEncryptedChatObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputEncryptedChat 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputEncryptedChatClassType"
            values: {
                "TypeInputEncryptedChat": 0
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "chatId"; type: "int" }
        Property { name: "core"; type: "InputEncryptedChat" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputEncryptedFileObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputEncryptedFile 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputEncryptedFileClassType"
            values: {
                "TypeInputEncryptedFileEmpty": 0,
                "TypeInputEncryptedFileUploaded": 1,
                "TypeInputEncryptedFile": 2,
                "TypeInputEncryptedFileBigUploaded": 3
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "keyFingerprint"; type: "int" }
        Property { name: "md5Checksum"; type: "string" }
        Property { name: "parts"; type: "int" }
        Property { name: "core"; type: "InputEncryptedFile" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputFileLocationObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputFileLocation 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputFileLocationClassType"
            values: {
                "TypeInputFileLocation": 0,
                "TypeInputEncryptedFileLocation": 1,
                "TypeInputDocumentFileLocation": 2
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "localId"; type: "int" }
        Property { name: "secret"; type: "qlonglong" }
        Property { name: "version"; type: "int" }
        Property { name: "volumeId"; type: "qlonglong" }
        Property { name: "core"; type: "InputFileLocation" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputFileObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputFile 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputFileClassType"
            values: {
                "TypeInputFile": 0,
                "TypeInputFileBig": 1
            }
        }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "md5Checksum"; type: "string" }
        Property { name: "name"; type: "string" }
        Property { name: "parts"; type: "int" }
        Property { name: "core"; type: "InputFile" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputGameObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputGame 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputGameClassType"
            values: {
                "TypeInputGameID": 0,
                "TypeInputGameShortName": 1
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "botId"; type: "InputUserObject"; isPointer: true }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "shortName"; type: "string" }
        Property { name: "core"; type: "InputGame" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputGeoPointObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputGeoPoint 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputGeoPointClassType"
            values: {
                "TypeInputGeoPointEmpty": 0,
                "TypeInputGeoPoint": 1
            }
        }
        Property { name: "lat"; type: "double" }
        Property { name: "longValue"; type: "double" }
        Property { name: "core"; type: "InputGeoPoint" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputMediaObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputMedia 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputMediaClassType"
            values: {
                "TypeInputMediaEmpty": 0,
                "TypeInputMediaUploadedPhoto": 1,
                "TypeInputMediaPhoto": 2,
                "TypeInputMediaGeoPoint": 3,
                "TypeInputMediaContact": 4,
                "TypeInputMediaUploadedDocument": 5,
                "TypeInputMediaUploadedThumbDocument": 6,
                "TypeInputMediaDocument": 7,
                "TypeInputMediaVenue": 8,
                "TypeInputMediaGifExternal": 9,
                "TypeInputMediaPhotoExternal": 10,
                "TypeInputMediaDocumentExternal": 11,
                "TypeInputMediaGame": 12
            }
        }
        Property { name: "address"; type: "string" }
        Property { name: "attributes"; type: "QList<DocumentAttribute>" }
        Property { name: "caption"; type: "string" }
        Property { name: "file"; type: "InputFileObject"; isPointer: true }
        Property { name: "firstName"; type: "string" }
        Property { name: "flags"; type: "int" }
        Property { name: "geoPoint"; type: "InputGeoPointObject"; isPointer: true }
        Property { name: "idInputDocument"; type: "InputDocumentObject"; isPointer: true }
        Property { name: "idInputGame"; type: "InputGameObject"; isPointer: true }
        Property { name: "idInputPhoto"; type: "InputPhotoObject"; isPointer: true }
        Property { name: "lastName"; type: "string" }
        Property { name: "mimeType"; type: "string" }
        Property { name: "phoneNumber"; type: "string" }
        Property { name: "provider"; type: "string" }
        Property { name: "q"; type: "string" }
        Property { name: "stickers"; type: "QList<InputDocument>" }
        Property { name: "thumb"; type: "InputFileObject"; isPointer: true }
        Property { name: "title"; type: "string" }
        Property { name: "url"; type: "string" }
        Property { name: "venueId"; type: "string" }
        Property { name: "core"; type: "InputMedia" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputNotifyPeerObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputNotifyPeer 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputNotifyPeerClassType"
            values: {
                "TypeInputNotifyPeer": 0,
                "TypeInputNotifyUsers": 1,
                "TypeInputNotifyChats": 2,
                "TypeInputNotifyAll": 3
            }
        }
        Property { name: "peer"; type: "InputPeerObject"; isPointer: true }
        Property { name: "core"; type: "InputNotifyPeer" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputPeerNotifyEventsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputPeerNotifyEvents 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputPeerNotifyEventsClassType"
            values: {
                "TypeInputPeerNotifyEventsEmpty": 0,
                "TypeInputPeerNotifyEventsAll": 1
            }
        }
        Property { name: "core"; type: "InputPeerNotifyEvents" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputPeerNotifySettingsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputPeerNotifySettings 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputPeerNotifySettingsClassType"
            values: {
                "TypeInputPeerNotifySettings": 0
            }
        }
        Property { name: "flags"; type: "int" }
        Property { name: "muteUntil"; type: "int" }
        Property { name: "showPreviews"; type: "bool" }
        Property { name: "silent"; type: "bool" }
        Property { name: "sound"; type: "string" }
        Property { name: "core"; type: "InputPeerNotifySettings" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputPeerObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputPeer 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputPeerClassType"
            values: {
                "TypeInputPeerEmpty": 0,
                "TypeInputPeerSelf": 1,
                "TypeInputPeerChat": 2,
                "TypeInputPeerUser": 3,
                "TypeInputPeerChannel": 4
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "channelId"; type: "int" }
        Property { name: "chatId"; type: "int" }
        Property { name: "userId"; type: "int" }
        Property { name: "core"; type: "InputPeer" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputPhotoObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputPhoto 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputPhotoClassType"
            values: {
                "TypeInputPhotoEmpty": 0,
                "TypeInputPhoto": 1
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "core"; type: "InputPhoto" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputPrivacyKeyObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputPrivacyKey 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputPrivacyKeyClassType"
            values: {
                "TypeInputPrivacyKeyStatusTimestamp": 0,
                "TypeInputPrivacyKeyChatInvite": 1
            }
        }
        Property { name: "core"; type: "InputPrivacyKey" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputPrivacyRuleObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputPrivacyRule 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputPrivacyRuleClassType"
            values: {
                "TypeInputPrivacyValueAllowContacts": 0,
                "TypeInputPrivacyValueAllowAll": 1,
                "TypeInputPrivacyValueAllowUsers": 2,
                "TypeInputPrivacyValueDisallowContacts": 3,
                "TypeInputPrivacyValueDisallowAll": 4,
                "TypeInputPrivacyValueDisallowUsers": 5
            }
        }
        Property { name: "users"; type: "QList<InputUser>" }
        Property { name: "core"; type: "InputPrivacyRule" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputStickerSetObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputStickerSet 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputStickerSetClassType"
            values: {
                "TypeInputStickerSetEmpty": 0,
                "TypeInputStickerSetID": 1,
                "TypeInputStickerSetShortName": 2
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "shortName"; type: "string" }
        Property { name: "core"; type: "InputStickerSet" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputStickeredMediaObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputStickeredMedia 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputStickeredMediaClassType"
            values: {
                "TypeInputStickeredMediaPhoto": 0,
                "TypeInputStickeredMediaDocument": 1
            }
        }
        Property { name: "idInputDocument"; type: "InputDocumentObject"; isPointer: true }
        Property { name: "idInputPhoto"; type: "InputPhotoObject"; isPointer: true }
        Property { name: "core"; type: "InputStickeredMedia" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "InputUserObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/InputUser 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputUserClassType"
            values: {
                "TypeInputUserEmpty": 0,
                "TypeInputUserSelf": 1,
                "TypeInputUser": 2
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "userId"; type: "int" }
        Property { name: "core"; type: "InputUser" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "KeyboardButtonObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/KeyboardButton 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "KeyboardButtonClassType"
            values: {
                "TypeKeyboardButton": 0,
                "TypeKeyboardButtonUrl": 1,
                "TypeKeyboardButtonCallback": 2,
                "TypeKeyboardButtonRequestPhone": 3,
                "TypeKeyboardButtonRequestGeoLocation": 4,
                "TypeKeyboardButtonSwitchInline": 5,
                "TypeKeyboardButtonGame": 6
            }
        }
        Property { name: "data"; type: "QByteArray" }
        Property { name: "flags"; type: "int" }
        Property { name: "query"; type: "string" }
        Property { name: "samePeer"; type: "bool" }
        Property { name: "text"; type: "string" }
        Property { name: "url"; type: "string" }
        Property { name: "core"; type: "KeyboardButton" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "KeyboardButtonRowObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/KeyboardButtonRow 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "KeyboardButtonRowClassType"
            values: {
                "TypeKeyboardButtonRow": 0
            }
        }
        Property { name: "buttons"; type: "QList<KeyboardButton>" }
        Property { name: "core"; type: "KeyboardButtonRow" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MaskCoordsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MaskCoords 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MaskCoordsClassType"
            values: {
                "TypeMaskCoords": 0
            }
        }
        Property { name: "n"; type: "int" }
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "zoom"; type: "double" }
        Property { name: "core"; type: "MaskCoords" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessageActionObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessageAction 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessageActionClassType"
            values: {
                "TypeMessageActionEmpty": 0,
                "TypeMessageActionChatCreate": 1,
                "TypeMessageActionChatEditTitle": 2,
                "TypeMessageActionChatEditPhoto": 3,
                "TypeMessageActionChatDeletePhoto": 4,
                "TypeMessageActionChatAddUser": 5,
                "TypeMessageActionChatDeleteUser": 6,
                "TypeMessageActionChatJoinedByLink": 7,
                "TypeMessageActionChannelCreate": 8,
                "TypeMessageActionChatMigrateTo": 9,
                "TypeMessageActionChannelMigrateFrom": 10,
                "TypeMessageActionPinMessage": 11,
                "TypeMessageActionHistoryClear": 12,
                "TypeMessageActionGameScore": 13
            }
        }
        Property { name: "channelId"; type: "int" }
        Property { name: "chatId"; type: "int" }
        Property { name: "gameId"; type: "qlonglong" }
        Property { name: "inviterId"; type: "int" }
        Property { name: "photo"; type: "PhotoObject"; isPointer: true }
        Property { name: "score"; type: "int" }
        Property { name: "title"; type: "string" }
        Property { name: "userId"; type: "int" }
        Property { name: "users"; type: "QList<qint32>" }
        Property { name: "core"; type: "MessageAction" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessageEntityObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessageEntity 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessageEntityClassType"
            values: {
                "TypeMessageEntityUnknown": 0,
                "TypeMessageEntityMention": 1,
                "TypeMessageEntityHashtag": 2,
                "TypeMessageEntityBotCommand": 3,
                "TypeMessageEntityUrl": 4,
                "TypeMessageEntityEmail": 5,
                "TypeMessageEntityBold": 6,
                "TypeMessageEntityItalic": 7,
                "TypeMessageEntityCode": 8,
                "TypeMessageEntityPre": 9,
                "TypeMessageEntityTextUrl": 10,
                "TypeMessageEntityMentionName": 11,
                "TypeInputMessageEntityMentionName": 12
            }
        }
        Property { name: "language"; type: "string" }
        Property { name: "length"; type: "int" }
        Property { name: "offset"; type: "int" }
        Property { name: "url"; type: "string" }
        Property { name: "userIdInputUser"; type: "InputUserObject"; isPointer: true }
        Property { name: "userIdInt"; type: "int" }
        Property { name: "core"; type: "MessageEntity" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessageFwdHeaderObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessageFwdHeader 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessageFwdHeaderClassType"
            values: {
                "TypeMessageFwdHeader": 0
            }
        }
        Property { name: "channelId"; type: "int" }
        Property { name: "channelPost"; type: "int" }
        Property { name: "date"; type: "int" }
        Property { name: "flags"; type: "int" }
        Property { name: "fromId"; type: "int" }
        Property { name: "core"; type: "MessageFwdHeader" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessageMediaObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessageMedia 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessageMediaClassType"
            values: {
                "TypeMessageMediaEmpty": 0,
                "TypeMessageMediaPhoto": 1,
                "TypeMessageMediaGeo": 2,
                "TypeMessageMediaContact": 3,
                "TypeMessageMediaUnsupported": 4,
                "TypeMessageMediaDocument": 5,
                "TypeMessageMediaWebPage": 6,
                "TypeMessageMediaVenue": 7,
                "TypeMessageMediaGame": 8
            }
        }
        Property { name: "address"; type: "string" }
        Property { name: "caption"; type: "string" }
        Property { name: "document"; type: "DocumentObject"; isPointer: true }
        Property { name: "firstName"; type: "string" }
        Property { name: "game"; type: "GameObject"; isPointer: true }
        Property { name: "geo"; type: "GeoPointObject"; isPointer: true }
        Property { name: "lastName"; type: "string" }
        Property { name: "phoneNumber"; type: "string" }
        Property { name: "photo"; type: "PhotoObject"; isPointer: true }
        Property { name: "provider"; type: "string" }
        Property { name: "title"; type: "string" }
        Property { name: "userId"; type: "int" }
        Property { name: "venueId"; type: "string" }
        Property { name: "webpage"; type: "WebPageObject"; isPointer: true }
        Property { name: "core"; type: "MessageMedia" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessageObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/Message 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessageClassType"
            values: {
                "TypeMessageEmpty": 0,
                "TypeMessage": 1,
                "TypeMessageService": 2
            }
        }
        Property { name: "action"; type: "MessageActionObject"; isPointer: true }
        Property { name: "date"; type: "int" }
        Property { name: "editDate"; type: "int" }
        Property { name: "entities"; type: "QList<MessageEntity>" }
        Property { name: "flags"; type: "int" }
        Property { name: "fromId"; type: "int" }
        Property { name: "fwdFrom"; type: "MessageFwdHeaderObject"; isPointer: true }
        Property { name: "id"; type: "int" }
        Property { name: "media"; type: "MessageMediaObject"; isPointer: true }
        Property { name: "mediaUnread"; type: "bool" }
        Property { name: "mentioned"; type: "bool" }
        Property { name: "message"; type: "string" }
        Property { name: "out"; type: "bool" }
        Property { name: "post"; type: "bool" }
        Property { name: "replyMarkup"; type: "ReplyMarkupObject"; isPointer: true }
        Property { name: "replyToMsgId"; type: "int" }
        Property { name: "silent"; type: "bool" }
        Property { name: "toId"; type: "PeerObject"; isPointer: true }
        Property { name: "viaBotId"; type: "int" }
        Property { name: "views"; type: "int" }
        Property { name: "core"; type: "Message" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessageRangeObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessageRange 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessageRangeClassType"
            values: {
                "TypeMessageRange": 0
            }
        }
        Property { name: "maxId"; type: "int" }
        Property { name: "minId"; type: "int" }
        Property { name: "core"; type: "MessageRange" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesAffectedHistoryObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesAffectedHistory 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesAffectedHistoryClassType"
            values: {
                "TypeMessagesAffectedHistory": 0
            }
        }
        Property { name: "offset"; type: "int" }
        Property { name: "pts"; type: "int" }
        Property { name: "ptsCount"; type: "int" }
        Property { name: "core"; type: "MessagesAffectedHistory" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesAffectedMessagesObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesAffectedMessages 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesAffectedMessagesClassType"
            values: {
                "TypeMessagesAffectedMessages": 0
            }
        }
        Property { name: "pts"; type: "int" }
        Property { name: "ptsCount"; type: "int" }
        Property { name: "core"; type: "MessagesAffectedMessages" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesAllStickersObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesAllStickers 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesAllStickersClassType"
            values: {
                "TypeMessagesAllStickersNotModified": 0,
                "TypeMessagesAllStickers": 1
            }
        }
        Property { name: "hash"; type: "int" }
        Property { name: "sets"; type: "QList<StickerSet>" }
        Property { name: "core"; type: "MessagesAllStickers" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesArchivedStickersObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesArchivedStickers 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesArchivedStickersClassType"
            values: {
                "TypeMessagesArchivedStickers": 0
            }
        }
        Property { name: "count"; type: "int" }
        Property { name: "sets"; type: "QList<StickerSetCovered>" }
        Property { name: "core"; type: "MessagesArchivedStickers" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesBotCallbackAnswerObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesBotCallbackAnswer 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesBotCallbackAnswerClassType"
            values: {
                "TypeMessagesBotCallbackAnswer": 0
            }
        }
        Property { name: "alert"; type: "bool" }
        Property { name: "flags"; type: "int" }
        Property { name: "hasUrl"; type: "bool" }
        Property { name: "message"; type: "string" }
        Property { name: "url"; type: "string" }
        Property { name: "core"; type: "MessagesBotCallbackAnswer" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesBotResultsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesBotResults 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesBotResultsClassType"
            values: {
                "TypeMessagesBotResults": 0
            }
        }
        Property { name: "flags"; type: "int" }
        Property { name: "gallery"; type: "bool" }
        Property { name: "nextOffset"; type: "string" }
        Property { name: "queryId"; type: "qlonglong" }
        Property { name: "results"; type: "QList<BotInlineResult>" }
        Property { name: "switchPm"; type: "InlineBotSwitchPMObject"; isPointer: true }
        Property { name: "core"; type: "MessagesBotResults" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesChatFullObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesChatFull 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesChatFullClassType"
            values: {
                "TypeMessagesChatFull": 0
            }
        }
        Property { name: "chats"; type: "QList<Chat>" }
        Property { name: "fullChat"; type: "ChatFullObject"; isPointer: true }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "MessagesChatFull" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesChatsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesChats 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesChatsClassType"
            values: {
                "TypeMessagesChats": 0
            }
        }
        Property { name: "chats"; type: "QList<Chat>" }
        Property { name: "core"; type: "MessagesChats" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesDhConfigObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesDhConfig 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesDhConfigClassType"
            values: {
                "TypeMessagesDhConfigNotModified": 0,
                "TypeMessagesDhConfig": 1
            }
        }
        Property { name: "g"; type: "int" }
        Property { name: "p"; type: "QByteArray" }
        Property { name: "random"; type: "QByteArray" }
        Property { name: "version"; type: "int" }
        Property { name: "core"; type: "MessagesDhConfig" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesDialogsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesDialogs 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesDialogsClassType"
            values: {
                "TypeMessagesDialogs": 0,
                "TypeMessagesDialogsSlice": 1
            }
        }
        Property { name: "chats"; type: "QList<Chat>" }
        Property { name: "count"; type: "int" }
        Property { name: "dialogs"; type: "QList<Dialog>" }
        Property { name: "messages"; type: "QList<Message>" }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "MessagesDialogs" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesFeaturedStickersObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesFeaturedStickers 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesFeaturedStickersClassType"
            values: {
                "TypeMessagesFeaturedStickersNotModified": 0,
                "TypeMessagesFeaturedStickers": 1
            }
        }
        Property { name: "hash"; type: "int" }
        Property { name: "sets"; type: "QList<StickerSetCovered>" }
        Property { name: "unread"; type: "QList<qint64>" }
        Property { name: "core"; type: "MessagesFeaturedStickers" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesFilterObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesFilter 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesFilterClassType"
            values: {
                "TypeInputMessagesFilterEmpty": 0,
                "TypeInputMessagesFilterPhotos": 1,
                "TypeInputMessagesFilterVideo": 2,
                "TypeInputMessagesFilterPhotoVideo": 3,
                "TypeInputMessagesFilterPhotoVideoDocuments": 4,
                "TypeInputMessagesFilterDocument": 5,
                "TypeInputMessagesFilterUrl": 6,
                "TypeInputMessagesFilterGif": 7,
                "TypeInputMessagesFilterVoice": 8,
                "TypeInputMessagesFilterMusic": 9,
                "TypeInputMessagesFilterChatPhotos": 10
            }
        }
        Property { name: "core"; type: "MessagesFilter" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesFoundGifsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesFoundGifs 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesFoundGifsClassType"
            values: {
                "TypeMessagesFoundGifs": 0
            }
        }
        Property { name: "nextOffset"; type: "int" }
        Property { name: "results"; type: "QList<FoundGif>" }
        Property { name: "core"; type: "MessagesFoundGifs" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesHighScoresObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesHighScores 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesHighScoresClassType"
            values: {
                "TypeMessagesHighScores": 0
            }
        }
        Property { name: "scores"; type: "QList<HighScore>" }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "MessagesHighScores" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesMessageEditDataObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesMessageEditData 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesMessageEditDataClassType"
            values: {
                "TypeMessagesMessageEditData": 0
            }
        }
        Property { name: "caption"; type: "bool" }
        Property { name: "flags"; type: "int" }
        Property { name: "core"; type: "MessagesMessageEditData" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesMessagesObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesMessages 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesMessagesClassType"
            values: {
                "TypeMessagesMessages": 0,
                "TypeMessagesMessagesSlice": 1,
                "TypeMessagesChannelMessages": 2
            }
        }
        Property { name: "chats"; type: "QList<Chat>" }
        Property { name: "count"; type: "int" }
        Property { name: "flags"; type: "int" }
        Property { name: "messages"; type: "QList<Message>" }
        Property { name: "pts"; type: "int" }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "MessagesMessages" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesPeerDialogsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesPeerDialogs 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesPeerDialogsClassType"
            values: {
                "TypeMessagesPeerDialogs": 0
            }
        }
        Property { name: "chats"; type: "QList<Chat>" }
        Property { name: "dialogs"; type: "QList<Dialog>" }
        Property { name: "messages"; type: "QList<Message>" }
        Property { name: "state"; type: "UpdatesStateObject"; isPointer: true }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "MessagesPeerDialogs" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesRecentStickersObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesRecentStickers 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesRecentStickersClassType"
            values: {
                "TypeMessagesRecentStickersNotModified": 0,
                "TypeMessagesRecentStickers": 1
            }
        }
        Property { name: "hash"; type: "int" }
        Property { name: "stickers"; type: "QList<Document>" }
        Property { name: "core"; type: "MessagesRecentStickers" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesSavedGifsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesSavedGifs 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesSavedGifsClassType"
            values: {
                "TypeMessagesSavedGifsNotModified": 0,
                "TypeMessagesSavedGifs": 1
            }
        }
        Property { name: "gifs"; type: "QList<Document>" }
        Property { name: "hash"; type: "int" }
        Property { name: "core"; type: "MessagesSavedGifs" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesSentEncryptedMessageObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesSentEncryptedMessage 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesSentEncryptedMessageClassType"
            values: {
                "TypeMessagesSentEncryptedMessage": 0,
                "TypeMessagesSentEncryptedFile": 1
            }
        }
        Property { name: "date"; type: "int" }
        Property { name: "file"; type: "EncryptedFileObject"; isPointer: true }
        Property { name: "core"; type: "MessagesSentEncryptedMessage" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesStickerSetInstallResultObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesStickerSetInstallResult 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesStickerSetInstallResultClassType"
            values: {
                "TypeMessagesStickerSetInstallResultSuccess": 0,
                "TypeMessagesStickerSetInstallResultArchive": 1
            }
        }
        Property { name: "sets"; type: "QList<StickerSetCovered>" }
        Property { name: "core"; type: "MessagesStickerSetInstallResult" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesStickerSetObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesStickerSet 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesStickerSetClassType"
            values: {
                "TypeMessagesStickerSet": 0
            }
        }
        Property { name: "documents"; type: "QList<Document>" }
        Property { name: "packs"; type: "QList<StickerPack>" }
        Property { name: "set"; type: "StickerSetObject"; isPointer: true }
        Property { name: "core"; type: "MessagesStickerSet" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "MessagesStickersObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/MessagesStickers 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessagesStickersClassType"
            values: {
                "TypeMessagesStickersNotModified": 0,
                "TypeMessagesStickers": 1
            }
        }
        Property { name: "hash"; type: "string" }
        Property { name: "stickers"; type: "QList<Document>" }
        Property { name: "core"; type: "MessagesStickers" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "NearestDcObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/NearestDc 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "NearestDcClassType"
            values: {
                "TypeNearestDc": 0
            }
        }
        Property { name: "country"; type: "string" }
        Property { name: "nearestDc"; type: "int" }
        Property { name: "thisDc"; type: "int" }
        Property { name: "core"; type: "NearestDc" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "NotifyPeerObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/NotifyPeer 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "NotifyPeerClassType"
            values: {
                "TypeNotifyPeer": 0,
                "TypeNotifyUsers": 1,
                "TypeNotifyChats": 2,
                "TypeNotifyAll": 3
            }
        }
        Property { name: "peer"; type: "PeerObject"; isPointer: true }
        Property { name: "core"; type: "NotifyPeer" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "PeerNotifyEventsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/PeerNotifyEvents 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PeerNotifyEventsClassType"
            values: {
                "TypePeerNotifyEventsEmpty": 0,
                "TypePeerNotifyEventsAll": 1
            }
        }
        Property { name: "core"; type: "PeerNotifyEvents" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "PeerNotifySettingsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/PeerNotifySettings 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PeerNotifySettingsClassType"
            values: {
                "TypePeerNotifySettingsEmpty": 0,
                "TypePeerNotifySettings": 1
            }
        }
        Property { name: "flags"; type: "int" }
        Property { name: "muteUntil"; type: "int" }
        Property { name: "showPreviews"; type: "bool" }
        Property { name: "silent"; type: "bool" }
        Property { name: "sound"; type: "string" }
        Property { name: "core"; type: "PeerNotifySettings" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "PeerObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/Peer 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PeerClassType"
            values: {
                "TypePeerUser": 0,
                "TypePeerChat": 1,
                "TypePeerChannel": 2
            }
        }
        Property { name: "channelId"; type: "int" }
        Property { name: "chatId"; type: "int" }
        Property { name: "userId"; type: "int" }
        Property { name: "core"; type: "Peer" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "PeerSettingsObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/PeerSettings 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PeerSettingsClassType"
            values: {
                "TypePeerSettings": 0
            }
        }
        Property { name: "flags"; type: "int" }
        Property { name: "reportSpam"; type: "bool" }
        Property { name: "core"; type: "PeerSettings" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "PhotoObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/Photo 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PhotoClassType"
            values: {
                "TypePhotoEmpty": 0,
                "TypePhoto": 1
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "date"; type: "int" }
        Property { name: "flags"; type: "int" }
        Property { name: "hasStickers"; type: "bool" }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "sizes"; type: "QList<PhotoSize>" }
        Property { name: "core"; type: "Photo" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "PhotoSizeObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/PhotoSize 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PhotoSizeClassType"
            values: {
                "TypePhotoSizeEmpty": 0,
                "TypePhotoSize": 1,
                "TypePhotoCachedSize": 2,
                "TypePhotoSizeEmptySecret23": 3,
                "TypePhotoSizeSecret23": 4,
                "TypePhotoCachedSizeSecret23": 5
            }
        }
        Property { name: "bytes"; type: "QByteArray" }
        Property { name: "h"; type: "int" }
        Property { name: "location"; type: "FileLocationObject"; isPointer: true }
        Property { name: "size"; type: "int" }
        Property { name: "type"; type: "string" }
        Property { name: "w"; type: "int" }
        Property { name: "core"; type: "PhotoSize" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "PhotosPhotoObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/PhotosPhoto 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PhotosPhotoClassType"
            values: {
                "TypePhotosPhoto": 0
            }
        }
        Property { name: "photo"; type: "PhotoObject"; isPointer: true }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "PhotosPhoto" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "PhotosPhotosObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/PhotosPhotos 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PhotosPhotosClassType"
            values: {
                "TypePhotosPhotos": 0,
                "TypePhotosPhotosSlice": 1
            }
        }
        Property { name: "count"; type: "int" }
        Property { name: "photos"; type: "QList<Photo>" }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "PhotosPhotos" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "PrivacyKeyObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/PrivacyKey 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PrivacyKeyClassType"
            values: {
                "TypePrivacyKeyStatusTimestamp": 0,
                "TypePrivacyKeyChatInvite": 1
            }
        }
        Property { name: "core"; type: "PrivacyKey" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "PrivacyRuleObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/PrivacyRule 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PrivacyRuleClassType"
            values: {
                "TypePrivacyValueAllowContacts": 0,
                "TypePrivacyValueAllowAll": 1,
                "TypePrivacyValueAllowUsers": 2,
                "TypePrivacyValueDisallowContacts": 3,
                "TypePrivacyValueDisallowAll": 4,
                "TypePrivacyValueDisallowUsers": 5
            }
        }
        Property { name: "users"; type: "QList<qint32>" }
        Property { name: "core"; type: "PrivacyRule" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "QAbstractItemModel"
        prototype: "QObject"
        Enum {
            name: "LayoutChangeHint"
            values: {
                "NoLayoutChangeHint": 0,
                "VerticalSortHint": 1,
                "HorizontalSortHint": 2
            }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "QVector<int>" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
        }
        Signal {
            name: "headerDataChanged"
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutChanged" }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutAboutToBeChanged" }
        Signal {
            name: "rowsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal { name: "modelAboutToBeReset" }
        Signal { name: "modelReset" }
        Signal {
            name: "rowsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationRow"; type: "int" }
        }
        Signal {
            name: "rowsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationColumn"; type: "int" }
        }
        Signal {
            name: "columnsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "column"; type: "int" }
        }
        Method { name: "submit"; type: "bool" }
        Method { name: "revert" }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "parent"
            type: "QModelIndex"
            Parameter { name: "child"; type: "QModelIndex" }
        }
        Method {
            name: "sibling"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "idx"; type: "QModelIndex" }
        }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "columnCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "columnCount"; type: "int" }
        Method {
            name: "hasChildren"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "hasChildren"; type: "bool" }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
        }
        Method {
            name: "fetchMore"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "canFetchMore"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "flags"
            type: "Qt::ItemFlags"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
            Parameter { name: "flags"; type: "Qt::MatchFlags" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component { name: "QAbstractListModel"; prototype: "QAbstractItemModel" }
    Component {
        name: "QQuickItem"
        defaultProperty: "data"
        prototype: "QObject"
        Enum {
            name: "TransformOrigin"
            values: {
                "TopLeft": 0,
                "Top": 1,
                "TopRight": 2,
                "Left": 3,
                "Center": 4,
                "Right": 5,
                "BottomLeft": 6,
                "Bottom": 7,
                "BottomRight": 8
            }
        }
        Property { name: "parent"; type: "QQuickItem"; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "resources"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "z"; type: "double" }
        Property { name: "width"; type: "double" }
        Property { name: "height"; type: "double" }
        Property { name: "opacity"; type: "double" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "visible"; type: "bool" }
        Property { name: "visibleChildren"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "states"; type: "QQuickState"; isList: true; isReadonly: true }
        Property { name: "transitions"; type: "QQuickTransition"; isList: true; isReadonly: true }
        Property { name: "state"; type: "string" }
        Property { name: "childrenRect"; type: "QRectF"; isReadonly: true }
        Property { name: "anchors"; type: "QQuickAnchors"; isReadonly: true; isPointer: true }
        Property { name: "left"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "right"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "horizontalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "top"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "bottom"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "verticalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baseline"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baselineOffset"; type: "double" }
        Property { name: "clip"; type: "bool" }
        Property { name: "focus"; type: "bool" }
        Property { name: "activeFocus"; type: "bool"; isReadonly: true }
        Property { name: "activeFocusOnTab"; revision: 1; type: "bool" }
        Property { name: "rotation"; type: "double" }
        Property { name: "scale"; type: "double" }
        Property { name: "transformOrigin"; type: "TransformOrigin" }
        Property { name: "transformOriginPoint"; type: "QPointF"; isReadonly: true }
        Property { name: "transform"; type: "QQuickTransform"; isList: true; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "antialiasing"; type: "bool" }
        Property { name: "implicitWidth"; type: "double" }
        Property { name: "implicitHeight"; type: "double" }
        Property { name: "layer"; type: "QQuickItemLayer"; isReadonly: true; isPointer: true }
        Signal {
            name: "childrenRectChanged"
            Parameter { type: "QRectF" }
        }
        Signal {
            name: "baselineOffsetChanged"
            Parameter { type: "double" }
        }
        Signal {
            name: "stateChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "focusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusOnTabChanged"
            revision: 1
            Parameter { type: "bool" }
        }
        Signal {
            name: "parentChanged"
            Parameter { type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "transformOriginChanged"
            Parameter { type: "TransformOrigin" }
        }
        Signal {
            name: "smoothChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "antialiasingChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "clipChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "windowChanged"
            revision: 1
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Method { name: "update" }
        Method {
            name: "grabToImage"
            revision: 2
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "targetSize"; type: "QSize" }
        }
        Method {
            name: "grabToImage"
            revision: 2
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method { name: "forceActiveFocus" }
        Method {
            name: "forceActiveFocus"
            Parameter { name: "reason"; type: "Qt::FocusReason" }
        }
        Method {
            name: "nextItemInFocusChain"
            revision: 1
            type: "QQuickItem*"
            Parameter { name: "forward"; type: "bool" }
        }
        Method { name: "nextItemInFocusChain"; revision: 1; type: "QQuickItem*" }
        Method {
            name: "childAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component {
        name: "ReceivedNotifyMessageObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ReceivedNotifyMessage 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ReceivedNotifyMessageClassType"
            values: {
                "TypeReceivedNotifyMessage": 0
            }
        }
        Property { name: "flags"; type: "int" }
        Property { name: "id"; type: "int" }
        Property { name: "core"; type: "ReceivedNotifyMessage" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ReplyMarkupObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ReplyMarkup 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ReplyMarkupClassType"
            values: {
                "TypeReplyKeyboardHide": 0,
                "TypeReplyKeyboardForceReply": 1,
                "TypeReplyKeyboardMarkup": 2,
                "TypeReplyInlineMarkup": 3
            }
        }
        Property { name: "flags"; type: "int" }
        Property { name: "resize"; type: "bool" }
        Property { name: "rows"; type: "QList<KeyboardButtonRow>" }
        Property { name: "selective"; type: "bool" }
        Property { name: "singleUse"; type: "bool" }
        Property { name: "core"; type: "ReplyMarkup" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "ReportReasonObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/ReportReason 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ReportReasonClassType"
            values: {
                "TypeInputReportReasonSpam": 0,
                "TypeInputReportReasonViolence": 1,
                "TypeInputReportReasonPornography": 2,
                "TypeInputReportReasonOther": 3
            }
        }
        Property { name: "text"; type: "string" }
        Property { name: "core"; type: "ReportReason" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "SecretChatMessageObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/SecretChatMessage 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SecretChatMessageClassType"
            values: {
                "TypeSecretChatMessage": 0
            }
        }
        Property { name: "attachment"; type: "EncryptedFileObject"; isPointer: true }
        Property { name: "chatId"; type: "int" }
        Property { name: "date"; type: "int" }
        Property { name: "decryptedMessage"; type: "DecryptedMessageObject"; isPointer: true }
        Property { name: "ttl"; type: "int" }
        Property { name: "core"; type: "SecretChatMessage" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "SendMessageActionObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/SendMessageAction 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SendMessageActionClassType"
            values: {
                "TypeSendMessageTypingAction": 0,
                "TypeSendMessageCancelAction": 1,
                "TypeSendMessageRecordVideoAction": 2,
                "TypeSendMessageUploadVideoAction": 3,
                "TypeSendMessageRecordAudioAction": 4,
                "TypeSendMessageUploadAudioAction": 5,
                "TypeSendMessageUploadPhotoAction": 6,
                "TypeSendMessageUploadDocumentAction": 7,
                "TypeSendMessageGeoLocationAction": 8,
                "TypeSendMessageChooseContactAction": 9,
                "TypeSendMessageGamePlayAction": 10,
                "TypeSendMessageGameStopAction": 11,
                "TypeSendMessageTypingActionSecret17": 12,
                "TypeSendMessageCancelActionSecret17": 13,
                "TypeSendMessageRecordVideoActionSecret17": 14,
                "TypeSendMessageUploadVideoActionSecret17": 15,
                "TypeSendMessageRecordAudioActionSecret17": 16,
                "TypeSendMessageUploadAudioActionSecret17": 17,
                "TypeSendMessageUploadPhotoActionSecret17": 18,
                "TypeSendMessageUploadDocumentActionSecret17": 19,
                "TypeSendMessageGeoLocationActionSecret17": 20,
                "TypeSendMessageChooseContactActionSecret17": 21
            }
        }
        Property { name: "progress"; type: "int" }
        Property { name: "core"; type: "SendMessageAction" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "StickerPackObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/StickerPack 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "StickerPackClassType"
            values: {
                "TypeStickerPack": 0
            }
        }
        Property { name: "documents"; type: "QList<qint64>" }
        Property { name: "emoticon"; type: "string" }
        Property { name: "core"; type: "StickerPack" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "StickerSetCoveredObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/StickerSetCovered 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "StickerSetCoveredClassType"
            values: {
                "TypeStickerSetCovered": 0,
                "TypeStickerSetMultiCovered": 1
            }
        }
        Property { name: "cover"; type: "DocumentObject"; isPointer: true }
        Property { name: "covers"; type: "QList<Document>" }
        Property { name: "set"; type: "StickerSetObject"; isPointer: true }
        Property { name: "core"; type: "StickerSetCovered" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "StickerSetObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/StickerSet 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "StickerSetClassType"
            values: {
                "TypeStickerSet": 0
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "archived"; type: "bool" }
        Property { name: "count"; type: "int" }
        Property { name: "flags"; type: "int" }
        Property { name: "hash"; type: "int" }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "installed"; type: "bool" }
        Property { name: "masks"; type: "bool" }
        Property { name: "official"; type: "bool" }
        Property { name: "shortName"; type: "string" }
        Property { name: "title"; type: "string" }
        Property { name: "core"; type: "StickerSet" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "StorageFileTypeObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/StorageFileType 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "StorageFileTypeClassType"
            values: {
                "TypeStorageFileUnknown": 0,
                "TypeStorageFileJpeg": 1,
                "TypeStorageFileGif": 2,
                "TypeStorageFilePng": 3,
                "TypeStorageFilePdf": 4,
                "TypeStorageFileMp3": 5,
                "TypeStorageFileMov": 6,
                "TypeStorageFilePartial": 7,
                "TypeStorageFileMp4": 8,
                "TypeStorageFileWebp": 9
            }
        }
        Property { name: "core"; type: "StorageFileType" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "TQmlMessageObject"
        prototype: "MessageObject"
        exports: ["TelegramQml/TQmlMessage 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "secretChatMessage"; type: "SecretChatMessageObject"; isPointer: true }
    }
    Component {
        name: "TelegramAbstractEngineListModel"
        defaultProperty: "items"
        prototype: "TelegramAbstractListModel"
        Property { name: "engine"; type: "TelegramEngine"; isPointer: true }
        Method {
            name: "startTimer"
            Parameter { name: "ms"; type: "int" }
            Parameter { name: "callback"; type: "Callback" }
        }
    }
    Component {
        name: "TelegramAbstractListModel"
        defaultProperty: "items"
        prototype: "QAbstractListModel"
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "isEmpty"; type: "bool"; isReadonly: true }
        Property { name: "errorText"; type: "string"; isReadonly: true }
        Property { name: "errorCode"; type: "int"; isReadonly: true }
        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
        Signal { name: "errorChanged" }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "roleName"; type: "string" }
        }
        Method {
            name: "get"
            type: "QVariantMap"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "roles"; type: "QStringList" }
    }
    Component {
        name: "TelegramApp"
        prototype: "QObject"
        exports: ["TelegramQml/App 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "appId"; type: "int" }
        Property { name: "appHash"; type: "string" }
        Property { name: "isValid"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "TelegramAuthStore"
        prototype: "QObject"
        exports: ["TelegramQml/AuthStore 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "writeMethod"; type: "QJSValue" }
        Property { name: "readMethod"; type: "QJSValue" }
        Property { name: "isValid"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "TelegramAuthenticate"
        defaultProperty: "items"
        prototype: "TqObject"
        exports: ["TelegramQml/Authenticate 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AuthState"
            values: {
                "AuthUnknown": 0,
                "AuthCheckingPhone": 1,
                "AuthCheckingPhoneError": 2,
                "AuthSignUpNeeded": 3,
                "AuthCodeRequesting": 4,
                "AuthCodeRequestingError": 5,
                "AuthCodeRequested": 6,
                "AuthPasswordRequested": 7,
                "AuthLoggingIn": 8,
                "AuthLoggingInError": 9,
                "AuthLoggedIn": 10
            }
        }
        Property { name: "engine"; type: "TelegramEngine"; isPointer: true }
        Property { name: "state"; type: "int"; isReadonly: true }
        Property { name: "callTimeout"; type: "int"; isReadonly: true }
        Property { name: "remainingTime"; type: "int"; isReadonly: true }
        Signal { name: "authLoggedIn" }
        Method {
            name: "signUp"
            Parameter { name: "firstName"; type: "string" }
            Parameter { name: "lastName"; type: "string" }
        }
        Method {
            name: "signIn"
            Parameter { name: "code"; type: "string" }
        }
        Method {
            name: "checkPassword"
            Parameter { name: "password"; type: "string" }
        }
    }
    Component {
        name: "TelegramCache"
        defaultProperty: "items"
        prototype: "TqObject"
        exports: ["TelegramQml/Cache 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "path"; type: "string" }
        Property { name: "encryptMethod"; type: "QJSValue" }
        Property { name: "decryptMethod"; type: "QJSValue" }
        Property { name: "engine"; type: "TelegramEngine"; isReadonly: true; isPointer: true }
        Property { name: "pts"; type: "int"; isReadonly: true }
        Property { name: "updating"; type: "bool"; isReadonly: true }
        Property { name: "isValid"; type: "bool"; isReadonly: true }
        Signal { name: "qtsChanged" }
    }
    Component {
        name: "TelegramDialogListModel"
        defaultProperty: "items"
        prototype: "TelegramAbstractEngineListModel"
        exports: ["TelegramQml/DialogListModel 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "VisibilityFlags"
            values: {
                "VisibilityEmptyDialogs": 1,
                "VisibilityDeletedDialogs": 2,
                "VisibilityOnlineUsersOnly": 4,
                "VisibilityContacts": 8,
                "VisibilityNonContacts": 16,
                "VisibilityBots": 32,
                "VisibilityUsers": 24,
                "VisibilityChats": 64,
                "VisibilityChannels": 128,
                "VisibilitySecretChats": 256,
                "VisibilityAll": 507
            }
        }
        Enum {
            name: "SortFlag"
            values: {
                "SortByType": 0,
                "SortByName": 1,
                "SortByDate": 2,
                "SortByUnreads": 3,
                "SortByOnline": 4,
                "SortByCategories": 5
            }
        }
        Enum {
            name: "DataRoles"
            values: {
                "RoleDialogItem": 256,
                "RoleChatItem": 257,
                "RoleUserItem": 258,
                "RoleTopMessageItem": 259,
                "RolePeerItem": 260,
                "RolePeerHex": 261,
                "RoleIsSecretChat": 262,
                "RoleSecretChatState": 263,
                "RoleName": 264,
                "RoleMessageDate": 265,
                "RoleMessageUnread": 266,
                "RoleMessage": 267,
                "RoleMessageOut": 268,
                "RoleMessageType": 269,
                "RoleMessageUser": 270,
                "RoleLastOnline": 271,
                "RoleIsOnline": 272,
                "RoleStatus": 273,
                "RoleStatusText": 274,
                "RoleTyping": 275,
                "RoleUnreadCount": 276,
                "RoleMute": 277,
                "RoleCategory": 278,
                "RoleSecretChatStatus": 279
            }
        }
        Enum {
            name: "SecretChatState"
            values: {
                "SecretChatStateInit": 0,
                "SecretChatStateRequested": 1,
                "SecretChatStateAccepted": 2,
                "SecretChatStateCancelled": 3
            }
        }
        Property { name: "visibility"; type: "int" }
        Property { name: "sortFlag"; type: "QList<qint32>" }
        Property { name: "filter"; type: "string" }
        Property { name: "dateConvertorMethod"; type: "QJSValue" }
        Property { name: "messageTextMethod"; type: "QJSValue" }
        Property { name: "refreshing"; type: "bool"; isReadonly: true }
        Property { name: "useCache"; type: "bool" }
        Property { name: "categories"; type: "QVariantMap" }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "peer"; type: "InputPeerObject"; isPointer: true }
        }
        Method {
            name: "clearHistory"
            Parameter { name: "peer"; type: "InputPeerObject"; isPointer: true }
            Parameter { name: "justClear"; type: "bool" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "clearHistory"
            Parameter { name: "peer"; type: "InputPeerObject"; isPointer: true }
            Parameter { name: "justClear"; type: "bool" }
        }
        Method {
            name: "clearHistory"
            Parameter { name: "peer"; type: "InputPeerObject"; isPointer: true }
        }
        Method {
            name: "addContact"
            Parameter { name: "firstName"; type: "string" }
            Parameter { name: "lastName"; type: "string" }
            Parameter { name: "phoneNumber"; type: "string" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "addContact"
            Parameter { name: "firstName"; type: "string" }
            Parameter { name: "lastName"; type: "string" }
            Parameter { name: "phoneNumber"; type: "string" }
        }
    }
    Component {
        name: "TelegramDownloadHandler"
        defaultProperty: "items"
        prototype: "TqObject"
        exports: ["TelegramQml/DownloadHandler 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "TelegramTypeQObject"; isPointer: true }
        Property { name: "target"; type: "TelegramFileLocation"; isReadonly: true; isPointer: true }
        Property { name: "targetType"; type: "int"; isReadonly: true }
        Property { name: "size"; type: "int"; isReadonly: true }
        Property { name: "downloadedSize"; type: "int"; isReadonly: true }
        Property { name: "downloadTotal"; type: "int"; isReadonly: true }
        Property { name: "downloading"; type: "bool"; isReadonly: true }
        Property { name: "destination"; type: "string"; isReadonly: true }
        Property { name: "thumbnail"; type: "string"; isReadonly: true }
        Property { name: "imageSize"; type: "QSizeF"; isReadonly: true }
        Property { name: "thumbnailSize"; type: "QSizeF"; isReadonly: true }
        Signal { name: "engineChanged" }
        Method { name: "download"; type: "bool" }
        Method { name: "check"; type: "bool" }
        Method { name: "stop" }
    }
    Component {
        name: "TelegramEngine"
        defaultProperty: "items"
        prototype: "TqObject"
        exports: ["TelegramQml/Engine 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AuthState"
            values: {
                "AuthUnknown": 0,
                "AuthInitializing": 1,
                "AuthNeeded": 2,
                "AuthFetchingOurDetails": 3,
                "AuthLoggedIn": 4
            }
        }
        Enum {
            name: "LogLevel"
            values: {
                "LogLevelClean": 0,
                "LogLevelUseful": 1,
                "LogLevelFull": 2
            }
        }
        Property { name: "phoneNumber"; type: "string" }
        Property { name: "configDirectory"; type: "string" }
        Property { name: "app"; type: "TelegramApp"; isPointer: true }
        Property { name: "host"; type: "TelegramHost"; isPointer: true }
        Property { name: "cache"; type: "TelegramCache"; isPointer: true }
        Property { name: "authStore"; type: "TelegramAuthStore"; isPointer: true }
        Property { name: "profileManager"; type: "TelegramProfileManagerModel"; isPointer: true }
        Property { name: "our"; type: "UserFullObject"; isReadonly: true; isPointer: true }
        Property { name: "timeout"; type: "int" }
        Property { name: "state"; type: "int"; isReadonly: true }
        Property { name: "logLevel"; type: "int" }
        Property { name: "tempPath"; type: "string" }
        Property { name: "telegramObject"; type: "Telegram"; isReadonly: true; isPointer: true }
        Signal { name: "authLoggedIn" }
        Signal { name: "authNeeded" }
        Signal { name: "authLoggedOut" }
        Signal { name: "telegramChanged" }
        Method { name: "logout" }
    }
    Component {
        name: "TelegramEnums"
        prototype: "QObject"
        exports: ["TelegramQml/Enums 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SendFileType"
            values: {
                "SendFileTypeAutoDetect": 0,
                "SendFileTypeDocument": 1,
                "SendFileTypeSticker": 2,
                "SendFileTypeAnimated": 3,
                "SendFileTypeVideo": 4,
                "SendFileTypePhoto": 5,
                "SendFileTypeAudio": 6
            }
        }
        Enum {
            name: "MessageType"
            values: {
                "TypeTextMessage": 0,
                "TypeDocumentMessage": 1,
                "TypeVideoMessage": 2,
                "TypeAudioMessage": 3,
                "TypeVenueMessage": 4,
                "TypeWebPageMessage": 5,
                "TypeGeoMessage": 6,
                "TypeContactMessage": 7,
                "TypeActionMessage": 8,
                "TypePhotoMessage": 9,
                "TypeStickerMessage": 10,
                "TypeAnimatedMessage": 11,
                "TypeUnsupportedMessage": 12
            }
        }
    }
    Component {
        name: "TelegramHost"
        prototype: "QObject"
        exports: ["TelegramQml/Host 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "hostAddress"; type: "string" }
        Property { name: "hostPort"; type: "int" }
        Property { name: "hostDcId"; type: "int" }
        Property { name: "publicKey"; type: "QUrl" }
        Property { name: "isValid"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "TelegramImageElement"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["TelegramQml/Image 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "TelegramTypeQObject"; isPointer: true }
        Property { name: "engine"; type: "TelegramEngine"; isPointer: true }
        Property { name: "qtQuickVersion"; type: "string" }
        Property { name: "fileSize"; type: "int"; isReadonly: true }
        Property { name: "downloadedSize"; type: "int"; isReadonly: true }
        Property { name: "downloading"; type: "bool"; isReadonly: true }
        Property { name: "downloaded"; type: "bool"; isReadonly: true }
        Property { name: "thumbnailDownloaded"; type: "bool"; isReadonly: true }
        Property { name: "destination"; type: "QUrl"; isReadonly: true }
        Property { name: "thumbnail"; type: "QUrl"; isReadonly: true }
        Property { name: "currentImage"; type: "QUrl"; isReadonly: true }
        Property { name: "imageSize"; type: "QSizeF"; isReadonly: true }
        Property { name: "errorText"; type: "string"; isReadonly: true }
        Property { name: "errorCode"; type: "int"; isReadonly: true }
        Property { name: "asynchronous"; type: "bool" }
        Property { name: "autoTransform"; type: "bool" }
        Property { name: "cache"; type: "bool" }
        Property { name: "fillMode"; type: "int" }
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "mipmap"; type: "bool" }
        Property { name: "mirror"; type: "bool" }
        Property { name: "paintedHeight"; type: "double"; isReadonly: true }
        Property { name: "paintedWidth"; type: "double"; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "sourceSize"; type: "QSizeF" }
        Property { name: "verticalAlignment"; type: "int" }
        Signal { name: "errorChanged" }
        Method { name: "download"; type: "bool" }
        Method { name: "check"; type: "bool" }
        Method { name: "stop" }
    }
    Component {
        name: "TelegramMediaListModel"
        defaultProperty: "items"
        prototype: "TelegramMessageSearchModel"
        exports: ["TelegramQml/MediaListModel 2.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "TelegramMembersListModel"
        defaultProperty: "items"
        prototype: "TelegramAbstractEngineListModel"
        exports: ["TelegramQml/MembersListModel 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DataRoles"
            values: {
                "RoleDate": 256,
                "RoleInviter": 257,
                "RoleUser": 258,
                "RoleKickedBy": 259,
                "RoleType": 260,
                "RolePeer": 261,
                "RoleStatus": 262
            }
        }
        Enum {
            name: "Types"
            values: {
                "TypeNormal": 0,
                "TypeSelf": 1,
                "TypeAdmin": 2,
                "TypeModerator": 3,
                "TypeEditor": 4,
                "TypeKicked": 5,
                "TypeCreator": 6,
                "TypeUnknown": 7
            }
        }
        Property { name: "currentPeer"; type: "InputPeerObject"; isPointer: true }
        Property { name: "filter"; type: "int" }
        Property { name: "refreshing"; type: "bool"; isReadonly: true }
        Property { name: "dateConvertorMethod"; type: "QJSValue" }
    }
    Component {
        name: "TelegramMessageFetcher"
        defaultProperty: "items"
        prototype: "TqObject"
        exports: ["TelegramQml/MessageFetcher 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "engine"; type: "TelegramEngine"; isPointer: true }
        Property { name: "messageId"; type: "int" }
        Property { name: "inputPeer"; type: "InputPeerObject"; isPointer: true }
        Property { name: "result"; type: "TQmlMessageObject"; isReadonly: true; isPointer: true }
        Property { name: "fromUser"; type: "UserObject"; isReadonly: true; isPointer: true }
        Property { name: "mediaType"; type: "int"; isReadonly: true }
    }
    Component {
        name: "TelegramMessageListModel"
        defaultProperty: "items"
        prototype: "TelegramAbstractEngineListModel"
        exports: ["TelegramQml/MessageListModel 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DataRoles"
            values: {
                "RoleMessageItem": 256,
                "RoleMediaItem": 257,
                "RoleServiceItem": 258,
                "RoleMarkupItem": 259,
                "RoleEntityList": 260,
                "RoleFromUserItem": 261,
                "RoleToUserItem": 262,
                "RoleToChatItem": 263,
                "RoleToPeerItem": 264,
                "RoleMessage": 265,
                "RoleDateTime": 266,
                "RoleDate": 267,
                "RoleUnread": 268,
                "RoleSent": 269,
                "RoleOut": 270,
                "RoleReplyMsgId": 271,
                "RoleReplyMessage": 272,
                "RoleReplyPeer": 273,
                "RoleForwardFromPeer": 274,
                "RoleForwardDate": 275,
                "RoleMessageType": 276,
                "RoleReplyType": 277,
                "RoleFileName": 278,
                "RoleFileMimeType": 279,
                "RoleFileTitle": 280,
                "RoleFilePerformer": 281,
                "RoleFileDuration": 282,
                "RoleFileIsVoice": 283,
                "RoleFileSize": 284,
                "RoleDownloadable": 285,
                "RoleUploading": 286,
                "RoleDownloading": 287,
                "RoleTransfaring": 288,
                "RoleTransfared": 289,
                "RoleTransfaredSize": 290,
                "RoleTotalSize": 291,
                "RoleFilePath": 292,
                "RoleThumbPath": 293
            }
        }
        Property { name: "refreshing"; type: "bool"; isReadonly: true }
        Property { name: "currentPeer"; type: "InputPeerObject"; isPointer: true }
        Property { name: "messageList"; type: "QList<qint32>" }
        Property { name: "dateConvertorMethod"; type: "QJSValue" }
        Property { name: "key"; type: "QByteArray"; isReadonly: true }
        Property { name: "typingUsers"; type: "QVariantList"; isReadonly: true }
        Property { name: "limit"; type: "int" }
        Property { name: "megagroup"; type: "bool"; isReadonly: true }
        Property { name: "editable"; type: "bool"; isReadonly: true }
        Property { name: "useCache"; type: "bool" }
        Method {
            name: "sendMessage"
            type: "bool"
            Parameter { name: "message"; type: "string" }
            Parameter { name: "replyTo"; type: "TQmlMessageObject"; isPointer: true }
            Parameter { name: "replyMarkup"; type: "ReplyMarkupObject"; isPointer: true }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "sendMessage"
            type: "bool"
            Parameter { name: "message"; type: "string" }
            Parameter { name: "replyTo"; type: "TQmlMessageObject"; isPointer: true }
            Parameter { name: "replyMarkup"; type: "ReplyMarkupObject"; isPointer: true }
        }
        Method {
            name: "sendMessage"
            type: "bool"
            Parameter { name: "message"; type: "string" }
            Parameter { name: "replyTo"; type: "TQmlMessageObject"; isPointer: true }
        }
        Method {
            name: "sendMessage"
            type: "bool"
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "sendFile"
            type: "bool"
            Parameter { name: "type"; type: "int" }
            Parameter { name: "file"; type: "string" }
            Parameter { name: "replyTo"; type: "TQmlMessageObject"; isPointer: true }
            Parameter { name: "replyMarkup"; type: "ReplyMarkupObject"; isPointer: true }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "sendFile"
            type: "bool"
            Parameter { name: "type"; type: "int" }
            Parameter { name: "file"; type: "string" }
            Parameter { name: "replyTo"; type: "TQmlMessageObject"; isPointer: true }
            Parameter { name: "replyMarkup"; type: "ReplyMarkupObject"; isPointer: true }
        }
        Method {
            name: "sendFile"
            type: "bool"
            Parameter { name: "type"; type: "int" }
            Parameter { name: "file"; type: "string" }
            Parameter { name: "replyTo"; type: "TQmlMessageObject"; isPointer: true }
        }
        Method {
            name: "sendFile"
            type: "bool"
            Parameter { name: "type"; type: "int" }
            Parameter { name: "file"; type: "string" }
        }
        Method {
            name: "deleteMessages"
            Parameter { name: "msgs"; type: "QList<qint32>" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "deleteMessages"
            Parameter { name: "msgs"; type: "QList<qint32>" }
        }
        Method {
            name: "forwardMessages"
            Parameter { name: "fromInputPeer"; type: "InputPeerObject"; isPointer: true }
            Parameter { name: "msgs"; type: "QList<qint32>" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "forwardMessages"
            Parameter { name: "fromInputPeer"; type: "InputPeerObject"; isPointer: true }
            Parameter { name: "msgs"; type: "QList<qint32>" }
        }
        Method {
            name: "resendMessage"
            Parameter { name: "msgId"; type: "int" }
            Parameter { name: "newCaption"; type: "string" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "resendMessage"
            Parameter { name: "msgId"; type: "int" }
            Parameter { name: "newCaption"; type: "string" }
        }
        Method {
            name: "resendMessage"
            Parameter { name: "msgId"; type: "int" }
        }
        Method {
            name: "sendSticker"
            Parameter { name: "doc"; type: "DocumentObject"; isPointer: true }
            Parameter { name: "replyTo"; type: "TQmlMessageObject"; isPointer: true }
            Parameter { name: "replyMarkup"; type: "ReplyMarkupObject"; isPointer: true }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "sendSticker"
            Parameter { name: "doc"; type: "DocumentObject"; isPointer: true }
            Parameter { name: "replyTo"; type: "TQmlMessageObject"; isPointer: true }
            Parameter { name: "replyMarkup"; type: "ReplyMarkupObject"; isPointer: true }
        }
        Method {
            name: "sendSticker"
            Parameter { name: "doc"; type: "DocumentObject"; isPointer: true }
            Parameter { name: "replyTo"; type: "TQmlMessageObject"; isPointer: true }
        }
        Method {
            name: "sendSticker"
            Parameter { name: "doc"; type: "DocumentObject"; isPointer: true }
        }
        Method {
            name: "markAsRead"
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method { name: "markAsRead" }
        Method {
            name: "clearHistory"
            Parameter { name: "justClear"; type: "bool" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "clearHistory"
            Parameter { name: "justClear"; type: "bool" }
        }
        Method {
            name: "loadFrom"
            Parameter { name: "msgId"; type: "int" }
        }
        Method { name: "loadBack" }
        Method { name: "loadFront" }
    }
    Component {
        name: "TelegramMessageSearchModel"
        defaultProperty: "items"
        prototype: "TelegramMessageListModel"
        exports: ["TelegramQml/MessageSearchModel 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "keyword"; type: "string" }
        Property { name: "currentPeer"; type: "InputPeerObject"; isPointer: true }
        Property { name: "messageFilter"; type: "int" }
        Property { name: "minimumDate"; type: "QDateTime" }
        Property { name: "maximumDate"; type: "QDateTime" }
        Method { name: "loadBack" }
    }
    Component {
        name: "TelegramNotificationHandler"
        defaultProperty: "items"
        prototype: "TqObject"
        exports: ["TelegramQml/NotificationHandler 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "engine"; type: "TelegramEngine"; isPointer: true }
        Property { name: "unreadCount"; type: "int"; isReadonly: true }
        Property { name: "globalUnreadCount"; type: "int"; isReadonly: true }
        Signal {
            name: "newMessage"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "message"; type: "string" }
            Parameter { name: "peerKey"; type: "string" }
        }
    }
    Component {
        name: "TelegramPeerDetails"
        defaultProperty: "items"
        prototype: "TqObject"
        exports: ["TelegramQml/PeerDetails 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "peer"; type: "InputPeerObject"; isPointer: true }
        Property { name: "engine"; type: "TelegramEngine"; isPointer: true }
        Property { name: "dateConvertorMethod"; type: "QJSValue" }
        Property { name: "isChat"; type: "bool"; isReadonly: true }
        Property { name: "isUser"; type: "bool"; isReadonly: true }
        Property { name: "isChannel"; type: "bool"; isReadonly: true }
        Property { name: "key"; type: "string"; isReadonly: true }
        Property { name: "displayName"; type: "string"; isReadonly: true }
        Property { name: "participantsCount"; type: "int"; isReadonly: true }
        Property { name: "statusText"; type: "string"; isReadonly: true }
        Property { name: "phoneNumber"; type: "string"; isReadonly: true }
        Property { name: "username"; type: "string" }
        Property { name: "mute"; type: "bool" }
        Property { name: "blocked"; type: "bool" }
        Property { name: "joined"; type: "bool" }
        Property { name: "refreshing"; type: "bool"; isReadonly: true }
        Property { name: "userFull"; type: "UserFullObject"; isReadonly: true; isPointer: true }
        Property { name: "chatFull"; type: "ChatFullObject"; isReadonly: true; isPointer: true }
        Property { name: "chatUsers"; type: "QVariantList"; isReadonly: true }
        Method {
            name: "renameChat"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "renameChat"
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "renameUser"
            Parameter { name: "firstName"; type: "string" }
            Parameter { name: "lastName"; type: "string" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "renameUser"
            Parameter { name: "firstName"; type: "string" }
            Parameter { name: "lastName"; type: "string" }
        }
    }
    Component {
        name: "TelegramProfileManagerModel"
        defaultProperty: "items"
        prototype: "TelegramAbstractListModel"
        exports: ["TelegramQml/ProfileManagerModel 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DataRole"
            values: {
                "DataPhoneNumber": 256,
                "DataMute": 257,
                "DataEngine": 258
            }
        }
        Enum {
            name: "AddResult"
            values: {
                "AddResultSucessfully": 0,
                "AddResultExists": 1,
                "AddResultInvalidPhone": 2,
                "AddResultDatabaseError": 3
            }
        }
        Property { name: "source"; type: "string" }
        Property { name: "engineDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "initializing"; type: "bool"; isReadonly: true }
        Method { name: "addNew" }
        Method {
            name: "add"
            type: "int"
            Parameter { name: "phoneNumber"; type: "string" }
            Parameter { name: "mute"; type: "bool" }
            Parameter { name: "engine"; type: "TelegramEngine"; isPointer: true }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "phoneNumber"; type: "string" }
        }
    }
    Component {
        name: "TelegramQmlSharedPointer"
        prototype: "QObject"
        exports: ["TelegramQml/SharedPointer 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "object"; type: "QObject"; isPointer: true }
        Method { name: "clean" }
    }
    Component {
        name: "TelegramStatus"
        defaultProperty: "items"
        prototype: "TqObject"
        exports: ["TelegramQml/Status 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "engine"; type: "TelegramEngine"; isPointer: true }
        Property { name: "online"; type: "bool" }
        Property { name: "typing"; type: "TelegramStatusTyping"; isPointer: true }
        Method {
            name: "requestStatus"
            Parameter { name: "online"; type: "bool" }
        }
        Method {
            name: "requestTyping"
            Parameter { name: "peer"; type: "InputPeerObject"; isPointer: true }
            Parameter { name: "action"; type: "SendMessageActionObject"; isPointer: true }
        }
    }
    Component {
        name: "TelegramStatusTyping"
        prototype: "QObject"
        exports: ["TelegramQml/StatusTyping 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "peer"; type: "InputPeerObject"; isPointer: true }
        Property { name: "action"; type: "SendMessageActionObject"; isPointer: true }
        Signal { name: "changed" }
    }
    Component {
        name: "TelegramStickersCategoriesModel"
        defaultProperty: "items"
        prototype: "TelegramAbstractEngineListModel"
        exports: ["TelegramQml/StickersCategoriesModel 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "refreshing"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "TelegramStickersModel"
        defaultProperty: "items"
        prototype: "TelegramAbstractEngineListModel"
        exports: ["TelegramQml/StickersModel 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DialogsRoles"
            values: {
                "RoleDocument": 256,
                "RoleAlt": 257
            }
        }
        Property { name: "refreshing"; type: "bool"; isReadonly: true }
        Property { name: "shortName"; type: "string" }
        Property { name: "stickerSet"; type: "InputStickerSetObject"; isPointer: true }
        Property { name: "documents"; type: "QVariantList" }
        Signal { name: "engineChanged" }
        Method { name: "showRecents" }
        Method {
            name: "addToRecents"
            Parameter { name: "doc"; type: "DocumentObject"; isPointer: true }
        }
    }
    Component {
        name: "TelegramTestTools"
        prototype: "QObject"
        exports: ["TelegramQml/TestTools 2.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "connectDestroy"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "callback"; type: "QJSValue" }
        }
    }
    Component {
        name: "TelegramTopMessagesModel"
        defaultProperty: "items"
        prototype: "TelegramMessageListModel"
        exports: ["TelegramQml/TopMessagesModel 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "VisibleTypes"
            values: {
                "VisibleTypeNone": 0,
                "VisibleTypeChannel": 1,
                "VisibleTypeChat": 2,
                "VisibleTypeUser": 4,
                "VisibleTypeMegaGroup": 8,
                "VisibleTypeAll": 15
            }
        }
        Property { name: "dialogsLimit"; type: "int" }
        Property { name: "visibleType"; type: "int" }
        Method { name: "recheck" }
    }
    Component {
        name: "TelegramTypeQObject"
        prototype: "QObject"
        exports: ["TelegramQml/TelegramTypeQObject 2.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "TopPeerCategoryObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/TopPeerCategory 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "TopPeerCategoryClassType"
            values: {
                "TypeTopPeerCategoryBotsPM": 0,
                "TypeTopPeerCategoryBotsInline": 1,
                "TypeTopPeerCategoryCorrespondents": 2,
                "TypeTopPeerCategoryGroups": 3,
                "TypeTopPeerCategoryChannels": 4
            }
        }
        Property { name: "core"; type: "TopPeerCategory" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "TopPeerCategoryPeersObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/TopPeerCategoryPeers 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "TopPeerCategoryPeersClassType"
            values: {
                "TypeTopPeerCategoryPeers": 0
            }
        }
        Property { name: "category"; type: "TopPeerCategoryObject"; isPointer: true }
        Property { name: "count"; type: "int" }
        Property { name: "peers"; type: "QList<TopPeer>" }
        Property { name: "core"; type: "TopPeerCategoryPeers" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "TopPeerObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/TopPeer 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "TopPeerClassType"
            values: {
                "TypeTopPeer": 0
            }
        }
        Property { name: "peer"; type: "PeerObject"; isPointer: true }
        Property { name: "rating"; type: "double" }
        Property { name: "core"; type: "TopPeer" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "TqObject"
        defaultProperty: "items"
        prototype: "QObject"
        Property { name: "errorText"; type: "string"; isReadonly: true }
        Property { name: "errorCode"; type: "int"; isReadonly: true }
        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
        Signal { name: "errorChanged" }
    }
    Component {
        name: "TqmlDocumentExporter"
        prototype: "QObject"
        exports: ["TelegramQml/DocumentExporter 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "destination"; type: "string" }
        Method { name: "exportDocuments" }
    }
    Component {
        name: "UpdateObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/Update 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "UpdateClassType"
            values: {
                "TypeUpdateNewMessage": 0,
                "TypeUpdateMessageID": 1,
                "TypeUpdateDeleteMessages": 2,
                "TypeUpdateUserTyping": 3,
                "TypeUpdateChatUserTyping": 4,
                "TypeUpdateChatParticipants": 5,
                "TypeUpdateUserStatus": 6,
                "TypeUpdateUserName": 7,
                "TypeUpdateUserPhoto": 8,
                "TypeUpdateContactRegistered": 9,
                "TypeUpdateContactLink": 10,
                "TypeUpdateNewAuthorization": 11,
                "TypeUpdateNewEncryptedMessage": 12,
                "TypeUpdateEncryptedChatTyping": 13,
                "TypeUpdateEncryption": 14,
                "TypeUpdateEncryptedMessagesRead": 15,
                "TypeUpdateChatParticipantAdd": 16,
                "TypeUpdateChatParticipantDelete": 17,
                "TypeUpdateDcOptions": 18,
                "TypeUpdateUserBlocked": 19,
                "TypeUpdateNotifySettings": 20,
                "TypeUpdateServiceNotification": 21,
                "TypeUpdatePrivacy": 22,
                "TypeUpdateUserPhone": 23,
                "TypeUpdateReadHistoryInbox": 24,
                "TypeUpdateReadHistoryOutbox": 25,
                "TypeUpdateWebPage": 26,
                "TypeUpdateReadMessagesContents": 27,
                "TypeUpdateChannelTooLong": 28,
                "TypeUpdateChannel": 29,
                "TypeUpdateNewChannelMessage": 30,
                "TypeUpdateReadChannelInbox": 31,
                "TypeUpdateDeleteChannelMessages": 32,
                "TypeUpdateChannelMessageViews": 33,
                "TypeUpdateChatAdmins": 34,
                "TypeUpdateChatParticipantAdmin": 35,
                "TypeUpdateNewStickerSet": 36,
                "TypeUpdateStickerSetsOrder": 37,
                "TypeUpdateStickerSets": 38,
                "TypeUpdateSavedGifs": 39,
                "TypeUpdateBotInlineQuery": 40,
                "TypeUpdateBotInlineSend": 41,
                "TypeUpdateEditChannelMessage": 42,
                "TypeUpdateChannelPinnedMessage": 43,
                "TypeUpdateBotCallbackQuery": 44,
                "TypeUpdateEditMessage": 45,
                "TypeUpdateInlineBotCallbackQuery": 46,
                "TypeUpdateReadChannelOutbox": 47,
                "TypeUpdateDraftMessage": 48,
                "TypeUpdateReadFeaturedStickers": 49,
                "TypeUpdateRecentStickers": 50,
                "TypeUpdateConfig": 51,
                "TypeUpdatePtsChanged": 52
            }
        }
        Property { name: "action"; type: "SendMessageActionObject"; isPointer: true }
        Property { name: "authKeyId"; type: "qlonglong" }
        Property { name: "blocked"; type: "bool" }
        Property { name: "channelId"; type: "int" }
        Property { name: "chat"; type: "EncryptedChatObject"; isPointer: true }
        Property { name: "chatId"; type: "int" }
        Property { name: "chatInstance"; type: "qlonglong" }
        Property { name: "data"; type: "QByteArray" }
        Property { name: "date"; type: "int" }
        Property { name: "dcOptions"; type: "QList<DcOption>" }
        Property { name: "device"; type: "string" }
        Property { name: "draft"; type: "DraftMessageObject"; isPointer: true }
        Property { name: "enabled"; type: "bool" }
        Property { name: "firstName"; type: "string" }
        Property { name: "flags"; type: "int" }
        Property { name: "foreignLink"; type: "ContactLinkObject"; isPointer: true }
        Property { name: "gameShortName"; type: "string" }
        Property { name: "geo"; type: "GeoPointObject"; isPointer: true }
        Property { name: "idString"; type: "string" }
        Property { name: "idInt"; type: "int" }
        Property { name: "inviterId"; type: "int" }
        Property { name: "isAdmin"; type: "bool" }
        Property { name: "key"; type: "PrivacyKeyObject"; isPointer: true }
        Property { name: "lastName"; type: "string" }
        Property { name: "location"; type: "string" }
        Property { name: "masks"; type: "bool" }
        Property { name: "maxDate"; type: "int" }
        Property { name: "maxId"; type: "int" }
        Property { name: "media"; type: "MessageMediaObject"; isPointer: true }
        Property { name: "messageEncrypted"; type: "EncryptedMessageObject"; isPointer: true }
        Property { name: "message"; type: "MessageObject"; isPointer: true }
        Property { name: "messageString"; type: "string" }
        Property { name: "messages"; type: "QList<qint32>" }
        Property {
            name: "msgIdInputBotInlineMessageID"
            type: "InputBotInlineMessageIDObject"
            isPointer: true
        }
        Property { name: "msgIdInt"; type: "int" }
        Property { name: "myLink"; type: "ContactLinkObject"; isPointer: true }
        Property { name: "notifySettings"; type: "PeerNotifySettingsObject"; isPointer: true }
        Property { name: "offset"; type: "string" }
        Property { name: "order"; type: "QList<qint64>" }
        Property { name: "participants"; type: "ChatParticipantsObject"; isPointer: true }
        Property { name: "peerNotify"; type: "NotifyPeerObject"; isPointer: true }
        Property { name: "peer"; type: "PeerObject"; isPointer: true }
        Property { name: "phone"; type: "string" }
        Property { name: "photo"; type: "UserProfilePhotoObject"; isPointer: true }
        Property { name: "popup"; type: "bool" }
        Property { name: "previous"; type: "bool" }
        Property { name: "pts"; type: "int" }
        Property { name: "ptsCount"; type: "int" }
        Property { name: "qts"; type: "int" }
        Property { name: "query"; type: "string" }
        Property { name: "queryId"; type: "qlonglong" }
        Property { name: "randomId"; type: "qlonglong" }
        Property { name: "rules"; type: "QList<PrivacyRule>" }
        Property { name: "status"; type: "UserStatusObject"; isPointer: true }
        Property { name: "stickerset"; type: "MessagesStickerSetObject"; isPointer: true }
        Property { name: "type"; type: "string" }
        Property { name: "userId"; type: "int" }
        Property { name: "username"; type: "string" }
        Property { name: "version"; type: "int" }
        Property { name: "views"; type: "int" }
        Property { name: "webpage"; type: "WebPageObject"; isPointer: true }
        Property { name: "core"; type: "Update" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "UpdatesChannelDifferenceObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/UpdatesChannelDifference 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "UpdatesChannelDifferenceClassType"
            values: {
                "TypeUpdatesChannelDifferenceEmpty": 0,
                "TypeUpdatesChannelDifferenceTooLong": 1,
                "TypeUpdatesChannelDifference": 2
            }
        }
        Property { name: "chats"; type: "QList<Chat>" }
        Property { name: "final"; type: "bool" }
        Property { name: "flags"; type: "int" }
        Property { name: "messages"; type: "QList<Message>" }
        Property { name: "newMessages"; type: "QList<Message>" }
        Property { name: "otherUpdates"; type: "QList<Update>" }
        Property { name: "pts"; type: "int" }
        Property { name: "readInboxMaxId"; type: "int" }
        Property { name: "readOutboxMaxId"; type: "int" }
        Property { name: "timeout"; type: "int" }
        Property { name: "topMessage"; type: "int" }
        Property { name: "unreadCount"; type: "int" }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "UpdatesChannelDifference" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "UpdatesDifferenceObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/UpdatesDifference 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "UpdatesDifferenceClassType"
            values: {
                "TypeUpdatesDifferenceEmpty": 0,
                "TypeUpdatesDifference": 1,
                "TypeUpdatesDifferenceSlice": 2
            }
        }
        Property { name: "chats"; type: "QList<Chat>" }
        Property { name: "date"; type: "int" }
        Property { name: "intermediateState"; type: "UpdatesStateObject"; isPointer: true }
        Property { name: "newEncryptedMessages"; type: "QList<EncryptedMessage>" }
        Property { name: "newMessages"; type: "QList<Message>" }
        Property { name: "otherUpdates"; type: "QList<Update>" }
        Property { name: "seq"; type: "int" }
        Property { name: "state"; type: "UpdatesStateObject"; isPointer: true }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "core"; type: "UpdatesDifference" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "UpdatesStateObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/UpdatesState 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "UpdatesStateClassType"
            values: {
                "TypeUpdatesState": 0
            }
        }
        Property { name: "date"; type: "int" }
        Property { name: "pts"; type: "int" }
        Property { name: "qts"; type: "int" }
        Property { name: "seq"; type: "int" }
        Property { name: "unreadCount"; type: "int" }
        Property { name: "core"; type: "UpdatesState" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "UpdatesTypeObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/UpdatesType 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "UpdatesTypeClassType"
            values: {
                "TypeUpdatesTooLong": 0,
                "TypeUpdateShortMessage": 1,
                "TypeUpdateShortChatMessage": 2,
                "TypeUpdateShort": 3,
                "TypeUpdatesCombined": 4,
                "TypeUpdates": 5,
                "TypeUpdateShortSentMessage": 6
            }
        }
        Property { name: "chatId"; type: "int" }
        Property { name: "chats"; type: "QList<Chat>" }
        Property { name: "date"; type: "int" }
        Property { name: "entities"; type: "QList<MessageEntity>" }
        Property { name: "flags"; type: "int" }
        Property { name: "fromId"; type: "int" }
        Property { name: "fwdFrom"; type: "MessageFwdHeaderObject"; isPointer: true }
        Property { name: "id"; type: "int" }
        Property { name: "media"; type: "MessageMediaObject"; isPointer: true }
        Property { name: "mediaUnread"; type: "bool" }
        Property { name: "mentioned"; type: "bool" }
        Property { name: "message"; type: "string" }
        Property { name: "out"; type: "bool" }
        Property { name: "pts"; type: "int" }
        Property { name: "ptsCount"; type: "int" }
        Property { name: "replyToMsgId"; type: "int" }
        Property { name: "seq"; type: "int" }
        Property { name: "seqStart"; type: "int" }
        Property { name: "silent"; type: "bool" }
        Property { name: "update"; type: "UpdateObject"; isPointer: true }
        Property { name: "updates"; type: "QList<Update>" }
        Property { name: "userId"; type: "int" }
        Property { name: "users"; type: "QList<User>" }
        Property { name: "viaBotId"; type: "int" }
        Property { name: "core"; type: "UpdatesType" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "UploadFileObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/UploadFile 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "UploadFileClassType"
            values: {
                "TypeUploadFile": 0
            }
        }
        Property { name: "bytes"; type: "QByteArray" }
        Property { name: "mtime"; type: "int" }
        Property { name: "type"; type: "StorageFileTypeObject"; isPointer: true }
        Property { name: "core"; type: "UploadFile" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "UserFullObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/UserFull 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "UserFullClassType"
            values: {
                "TypeUserFull": 0
            }
        }
        Property { name: "about"; type: "string" }
        Property { name: "blocked"; type: "bool" }
        Property { name: "botInfo"; type: "BotInfoObject"; isPointer: true }
        Property { name: "flags"; type: "int" }
        Property { name: "link"; type: "ContactsLinkObject"; isPointer: true }
        Property { name: "notifySettings"; type: "PeerNotifySettingsObject"; isPointer: true }
        Property { name: "profilePhoto"; type: "PhotoObject"; isPointer: true }
        Property { name: "user"; type: "UserObject"; isPointer: true }
        Property { name: "core"; type: "UserFull" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "UserObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/User 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "UserClassType"
            values: {
                "TypeUserEmpty": 0,
                "TypeUser": 1
            }
        }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "bot"; type: "bool" }
        Property { name: "botChatHistory"; type: "bool" }
        Property { name: "botInfoVersion"; type: "int" }
        Property { name: "botInlineGeo"; type: "bool" }
        Property { name: "botInlinePlaceholder"; type: "string" }
        Property { name: "botNochats"; type: "bool" }
        Property { name: "contact"; type: "bool" }
        Property { name: "deleted"; type: "bool" }
        Property { name: "firstName"; type: "string" }
        Property { name: "flags"; type: "int" }
        Property { name: "id"; type: "int" }
        Property { name: "lastName"; type: "string" }
        Property { name: "min"; type: "bool" }
        Property { name: "mutualContact"; type: "bool" }
        Property { name: "phone"; type: "string" }
        Property { name: "photo"; type: "UserProfilePhotoObject"; isPointer: true }
        Property { name: "restricted"; type: "bool" }
        Property { name: "restrictionReason"; type: "string" }
        Property { name: "self"; type: "bool" }
        Property { name: "status"; type: "UserStatusObject"; isPointer: true }
        Property { name: "username"; type: "string" }
        Property { name: "verified"; type: "bool" }
        Property { name: "core"; type: "User" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "UserProfilePhotoObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/UserProfilePhoto 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "UserProfilePhotoClassType"
            values: {
                "TypeUserProfilePhotoEmpty": 0,
                "TypeUserProfilePhoto": 1
            }
        }
        Property { name: "photoBig"; type: "FileLocationObject"; isPointer: true }
        Property { name: "photoId"; type: "qlonglong" }
        Property { name: "photoSmall"; type: "FileLocationObject"; isPointer: true }
        Property { name: "core"; type: "UserProfilePhoto" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "UserStatusObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/UserStatus 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "UserStatusClassType"
            values: {
                "TypeUserStatusEmpty": 0,
                "TypeUserStatusOnline": 1,
                "TypeUserStatusOffline": 2,
                "TypeUserStatusRecently": 3,
                "TypeUserStatusLastWeek": 4,
                "TypeUserStatusLastMonth": 5
            }
        }
        Property { name: "expires"; type: "int" }
        Property { name: "wasOnline"; type: "int" }
        Property { name: "core"; type: "UserStatus" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "WallPaperObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/WallPaper 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "WallPaperClassType"
            values: {
                "TypeWallPaper": 0,
                "TypeWallPaperSolid": 1
            }
        }
        Property { name: "bgColor"; type: "int" }
        Property { name: "color"; type: "int" }
        Property { name: "id"; type: "int" }
        Property { name: "sizes"; type: "QList<PhotoSize>" }
        Property { name: "title"; type: "string" }
        Property { name: "core"; type: "WallPaper" }
        Property { name: "classType"; type: "uint" }
    }
    Component {
        name: "WebPageObject"
        prototype: "TelegramTypeQObject"
        exports: ["TelegramQml/WebPage 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "WebPageClassType"
            values: {
                "TypeWebPageEmpty": 0,
                "TypeWebPagePending": 1,
                "TypeWebPage": 2
            }
        }
        Property { name: "author"; type: "string" }
        Property { name: "date"; type: "int" }
        Property { name: "description"; type: "string" }
        Property { name: "displayUrl"; type: "string" }
        Property { name: "document"; type: "DocumentObject"; isPointer: true }
        Property { name: "duration"; type: "int" }
        Property { name: "embedHeight"; type: "int" }
        Property { name: "embedType"; type: "string" }
        Property { name: "embedUrl"; type: "string" }
        Property { name: "embedWidth"; type: "int" }
        Property { name: "flags"; type: "int" }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "photo"; type: "PhotoObject"; isPointer: true }
        Property { name: "siteName"; type: "string" }
        Property { name: "title"; type: "string" }
        Property { name: "type"; type: "string" }
        Property { name: "url"; type: "string" }
        Property { name: "core"; type: "WebPage" }
        Property { name: "classType"; type: "uint" }
    }
}
