import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable TelegramQml 1.0'

Module {
    Component {
        name: "AudioObject"
        prototype: "TqObject"
        exports: ["TelegramQml/Audio 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "id"; type: "qlonglong" }
        Property { name: "dcId"; type: "int" }
        Property { name: "mimeType"; type: "string" }
        Property { name: "duration"; type: "int" }
        Property { name: "date"; type: "int" }
        Property { name: "size"; type: "int" }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "userId"; type: "int" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "BackgroundManager"
        prototype: "QObject"
        exports: ["TelegramQml/BackgroundManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "directory"; type: "QUrl" }
        Property { name: "dialog"; type: "DialogObject"; isPointer: true }
        Property { name: "background"; type: "QUrl"; isReadonly: true }
        Method {
            name: "setBackground"
            Parameter { name: "filePath"; type: "string" }
        }
    }
    Component {
        name: "ChatFullObject"
        prototype: "TqObject"
        exports: ["TelegramQml/ChatFull 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "participants"; type: "ChatParticipantsObject"; isPointer: true }
        Property { name: "chatPhoto"; type: "PhotoObject"; isPointer: true }
        Property { name: "id"; type: "int" }
        Property { name: "notifySettings"; type: "PeerNotifySettingsObject"; isPointer: true }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "ChatObject"
        prototype: "TqObject"
        exports: ["TelegramQml/Chat 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "participantsCount"; type: "int" }
        Property { name: "id"; type: "int" }
        Property { name: "version"; type: "int" }
        Property { name: "venue"; type: "string" }
        Property { name: "title"; type: "string" }
        Property { name: "address"; type: "string" }
        Property { name: "date"; type: "int" }
        Property { name: "photo"; type: "ChatPhotoObject"; isPointer: true }
        Property { name: "geo"; type: "GeoPointObject"; isPointer: true }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "checkedIn"; type: "bool" }
        Property { name: "left"; type: "bool" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "ChatParticipantList"
        prototype: "QObject"
        exports: ["TelegramQml/ChatParticipantList 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal { name: "firstChanged" }
        Signal { name: "lastChanged" }
        Method {
            name: "at"
            type: "ChatParticipantObject*"
            Parameter { name: "idx"; type: "int" }
        }
    }
    Component {
        name: "ChatParticipantObject"
        prototype: "TqObject"
        exports: ["TelegramQml/ChatParticipant 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "userId"; type: "int" }
        Property { name: "date"; type: "int" }
        Property { name: "inviterId"; type: "int" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "ChatParticipantsObject"
        prototype: "TqObject"
        exports: ["TelegramQml/ChatParticipants 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "participants"; type: "ChatParticipantList"; isPointer: true }
        Property { name: "chatId"; type: "int" }
        Property { name: "version"; type: "int" }
        Property { name: "adminId"; type: "int" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "ChatPhotoObject"
        prototype: "TqObject"
        exports: ["TelegramQml/ChatPhoto 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "photoBig"; type: "FileLocationObject"; isPointer: true }
        Property { name: "photoSmall"; type: "FileLocationObject"; isPointer: true }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "ContactLinkObject"
        prototype: "TqObject"
        exports: ["TelegramQml/ContactsForeignLink 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "ContactObject"
        prototype: "TqObject"
        exports: ["TelegramQml/Contact 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "userId"; type: "int" }
        Property { name: "mutual"; type: "bool" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "Database"
        prototype: "QObject"
        exports: ["TelegramQml/Database 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "phoneNumber"; type: "string" }
        Property { name: "configPath"; type: "string" }
        Signal {
            name: "userFounded"
            Parameter { name: "user"; type: "User" }
        }
        Signal {
            name: "chatFounded"
            Parameter { name: "chat"; type: "Chat" }
        }
        Signal {
            name: "dialogFounded"
            Parameter { name: "dialog"; type: "Dialog" }
            Parameter { name: "encrypted"; type: "bool" }
        }
        Signal {
            name: "messageFounded"
            Parameter { name: "message"; type: "Message" }
        }
        Signal {
            name: "mediaKeyFounded"
            Parameter { name: "mediaId"; type: "qlonglong" }
            Parameter { name: "key"; type: "QByteArray" }
            Parameter { name: "iv"; type: "QByteArray" }
        }
        Method {
            name: "insertUser"
            Parameter { name: "user"; type: "User" }
        }
        Method {
            name: "insertChat"
            Parameter { name: "chat"; type: "Chat" }
        }
        Method {
            name: "insertDialog"
            Parameter { name: "dialog"; type: "Dialog" }
            Parameter { name: "encrypted"; type: "bool" }
        }
        Method {
            name: "insertMessage"
            Parameter { name: "message"; type: "Message" }
        }
        Method {
            name: "insertMediaEncryptedKeys"
            Parameter { name: "mediaId"; type: "qlonglong" }
            Parameter { name: "key"; type: "QByteArray" }
            Parameter { name: "iv"; type: "QByteArray" }
        }
        Method { name: "readFullDialogs" }
        Method {
            name: "readMessages"
            Parameter { name: "peer"; type: "Peer" }
            Parameter { name: "offset"; type: "int" }
            Parameter { name: "limit"; type: "int" }
        }
        Method {
            name: "markMessagesAsRead"
            Parameter { name: "messages"; type: "QList<qint32>" }
        }
        Method {
            name: "markMessagesAsReadFromMaxDate"
            Parameter { name: "chatId"; type: "int" }
            Parameter { name: "maxDate"; type: "int" }
        }
        Method {
            name: "deleteMessage"
            Parameter { name: "msgId"; type: "qlonglong" }
        }
        Method {
            name: "deleteDialog"
            Parameter { name: "dlgId"; type: "qlonglong" }
        }
        Method {
            name: "deleteHistory"
            Parameter { name: "dlgId"; type: "qlonglong" }
        }
    }
    Component {
        name: "DecryptedMessageActionObject"
        prototype: "TqObject"
        exports: ["TelegramQml/DecryptedMessageAction 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "layer"; type: "int" }
        Property { name: "randomIds"; type: "QList<qint64>" }
        Property { name: "ttlSeconds"; type: "int" }
        Property { name: "startSeqNo"; type: "int" }
        Property { name: "endSeqNo"; type: "int" }
        Property { name: "action"; type: "SendMessageActionObject"; isPointer: true }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "DecryptedMessageMediaObject"
        prototype: "TqObject"
        exports: ["TelegramQml/DecryptedMessageMedia 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "thumb"; type: "QByteArray" }
        Property { name: "thumbW"; type: "int" }
        Property { name: "thumbH"; type: "int" }
        Property { name: "duration"; type: "int" }
        Property { name: "w"; type: "int" }
        Property { name: "h"; type: "int" }
        Property { name: "size"; type: "int" }
        Property { name: "latitude"; type: "double" }
        Property { name: "longitude"; type: "double" }
        Property { name: "key"; type: "QByteArray" }
        Property { name: "iv"; type: "QByteArray" }
        Property { name: "phoneNumber"; type: "string" }
        Property { name: "firstName"; type: "string" }
        Property { name: "lastName"; type: "string" }
        Property { name: "userId"; type: "int" }
        Property { name: "fileName"; type: "string" }
        Property { name: "mimeType"; type: "string" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "DecryptedMessageObject"
        prototype: "TqObject"
        exports: ["TelegramQml/DecryptedMessage 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "randomId"; type: "qlonglong" }
        Property { name: "ttl"; type: "int" }
        Property { name: "randomBytes"; type: "QByteArray" }
        Property { name: "message"; type: "string" }
        Property { name: "media"; type: "DecryptedMessageMediaObject"; isPointer: true }
        Property { name: "action"; type: "DecryptedMessageActionObject"; isPointer: true }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "DialogFilesModel"
        prototype: "TgAbstractListModel"
        exports: ["TelegramQml/DialogFilesModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FileRoles"
            values: {
                "NameRole": 256,
                "PathRole": 257,
                "ThumbnailRole": 258,
                "SuffixRole": 259
            }
        }
        Property { name: "telegram"; type: "TelegramQml"; isPointer: true }
        Property { name: "dialog"; type: "DialogObject"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method { name: "refresh" }
    }
    Component {
        name: "DialogObject"
        prototype: "TqObject"
        exports: ["TelegramQml/Dialog 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "peer"; type: "PeerObject"; isPointer: true }
        Property { name: "notifySettings"; type: "PeerNotifySettingsObject"; isPointer: true }
        Property { name: "topMessage"; type: "int" }
        Property { name: "unreadCount"; type: "int" }
        Property { name: "encrypted"; type: "bool" }
        Property { name: "typingUsers"; type: "QStringList" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "DocumentAttributeObject"
        prototype: "QObject"
        exports: ["TelegramQml/DocumentAttribute 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "alt"; type: "string" }
        Property { name: "duration"; type: "int" }
        Property { name: "fileName"; type: "string" }
        Property { name: "h"; type: "int" }
        Property { name: "w"; type: "int" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "DocumentObject"
        prototype: "TqObject"
        exports: ["TelegramQml/Document 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "id"; type: "qlonglong" }
        Property { name: "dcId"; type: "int" }
        Property { name: "mimeType"; type: "string" }
        Property { name: "thumb"; type: "PhotoSizeObject"; isPointer: true }
        Property { name: "date"; type: "int" }
        Property { name: "attributes"; type: "QList<DocumentAttribute>" }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "size"; type: "int" }
        Property { name: "encryptKey"; type: "QByteArray" }
        Property { name: "encryptIv"; type: "QByteArray" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "DownloadObject"
        prototype: "TqObject"
        exports: ["TelegramQml/Download 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "fileId"; type: "qlonglong" }
        Property { name: "location"; type: "string" }
        Property { name: "mtime"; type: "int" }
        Property { name: "partId"; type: "int" }
        Property { name: "downloaded"; type: "int" }
        Property { name: "total"; type: "int" }
        Property { name: "file"; type: "QFile"; isPointer: true }
        Signal { name: "changed" }
    }
    Component {
        name: "EncryptedChatObject"
        prototype: "TqObject"
        exports: ["TelegramQml/EncryptedChat 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "id"; type: "int" }
        Property { name: "gA"; type: "QByteArray" }
        Property { name: "keyFingerprint"; type: "qlonglong" }
        Property { name: "date"; type: "int" }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "adminId"; type: "int" }
        Property { name: "gAOrB"; type: "QByteArray" }
        Property { name: "participantId"; type: "int" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "EncryptedFileObject"
        prototype: "TqObject"
        exports: ["TelegramQml/EncryptedFile 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "dcId"; type: "int" }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "keyFingerprint"; type: "int" }
        Property { name: "size"; type: "int" }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "EncryptedMessageObject"
        prototype: "TqObject"
        exports: ["TelegramQml/EncryptedMessage 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "chatId"; type: "int" }
        Property { name: "date"; type: "int" }
        Property { name: "randomId"; type: "qlonglong" }
        Property { name: "file"; type: "EncryptedFileObject"; isPointer: true }
        Property { name: "bytes"; type: "QByteArray" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "FileLocationObject"
        prototype: "TqObject"
        exports: ["TelegramQml/FileLocation 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "download"; type: "DownloadObject"; isPointer: true }
        Property { name: "id"; type: "qlonglong" }
        Property { name: "fileName"; type: "string" }
        Property { name: "mimeType"; type: "string" }
        Property { name: "localId"; type: "int" }
        Property { name: "secret"; type: "qlonglong" }
        Property { name: "dcId"; type: "int" }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "volumeId"; type: "qlonglong" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "GeoChatMessageObject"
        prototype: "TqObject"
        exports: ["TelegramQml/GeoChatMessage 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "id"; type: "int" }
        Property { name: "action"; type: "MessageActionObject"; isPointer: true }
        Property { name: "fromId"; type: "int" }
        Property { name: "date"; type: "int" }
        Property { name: "media"; type: "MessageMediaObject"; isPointer: true }
        Property { name: "chatId"; type: "int" }
        Property { name: "message"; type: "string" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "GeoPointObject"
        prototype: "TqObject"
        exports: ["TelegramQml/GeoPoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "longitude"; type: "double" }
        Property { name: "lat"; type: "double" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "InputPeerObject"
        prototype: "TqObject"
        exports: ["TelegramQml/InputPeer 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "chatId"; type: "int" }
        Property { name: "userId"; type: "int" }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "MP3ConverterEngine"
        prototype: "QObject"
        exports: ["TelegramQml/MP3ConverterEngine 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "string" }
        Property { name: "destination"; type: "string" }
        Property { name: "running"; type: "bool"; isReadonly: true }
        Signal { name: "finished" }
        Signal { name: "error" }
        Method { name: "start" }
    }
    Component {
        name: "MessageActionObject"
        prototype: "TqObject"
        exports: ["TelegramQml/MessageAction 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "address"; type: "string" }
        Property { name: "userId"; type: "int" }
        Property { name: "photo"; type: "PhotoObject"; isPointer: true }
        Property { name: "title"; type: "string" }
        Property { name: "users"; type: "QList<qint32>" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "MessageMediaObject"
        prototype: "TqObject"
        exports: ["TelegramQml/MessageMedia 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "audio"; type: "AudioObject"; isPointer: true }
        Property { name: "lastName"; type: "string" }
        Property { name: "firstName"; type: "string" }
        Property { name: "caption"; type: "string" }
        Property { name: "document"; type: "DocumentObject"; isPointer: true }
        Property { name: "geo"; type: "GeoPointObject"; isPointer: true }
        Property { name: "photo"; type: "PhotoObject"; isPointer: true }
        Property { name: "phoneNumber"; type: "string" }
        Property { name: "userId"; type: "int" }
        Property { name: "video"; type: "VideoObject"; isPointer: true }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
        Signal { name: "bytesChanged" }
    }
    Component {
        name: "MessageObject"
        prototype: "TqObject"
        exports: ["TelegramQml/Message 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "id"; type: "int" }
        Property { name: "sent"; type: "bool" }
        Property { name: "encrypted"; type: "bool" }
        Property { name: "upload"; type: "UploadObject"; isPointer: true }
        Property { name: "toId"; type: "PeerObject"; isPointer: true }
        Property { name: "unread"; type: "bool" }
        Property { name: "action"; type: "MessageActionObject"; isPointer: true }
        Property { name: "fromId"; type: "int" }
        Property { name: "out"; type: "bool" }
        Property { name: "date"; type: "int" }
        Property { name: "media"; type: "MessageMediaObject"; isPointer: true }
        Property { name: "fwdDate"; type: "int" }
        Property { name: "fwdFromId"; type: "int" }
        Property { name: "replyToMsgId"; type: "int" }
        Property { name: "message"; type: "string" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "NotifyPeerObject"
        prototype: "TqObject"
        exports: ["TelegramQml/NotifyPeer 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "peer"; type: "PeerObject"; isPointer: true }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "PeerNotifySettingsObject"
        prototype: "TqObject"
        exports: ["TelegramQml/PeerNotifySettings 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "muteUntil"; type: "int" }
        Property { name: "eventsMask"; type: "int" }
        Property { name: "sound"; type: "string" }
        Property { name: "showPreviews"; type: "bool" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "PeerObject"
        prototype: "TqObject"
        exports: ["TelegramQml/Peer 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "chatId"; type: "int" }
        Property { name: "userId"; type: "int" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "PhotoObject"
        prototype: "TqObject"
        exports: ["TelegramQml/Photo 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "id"; type: "qlonglong" }
        Property { name: "date"; type: "int" }
        Property { name: "sizes"; type: "PhotoSizeList"; isPointer: true }
        Property { name: "geo"; type: "GeoPointObject"; isPointer: true }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "userId"; type: "int" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "PhotoSizeList"
        prototype: "QObject"
        exports: ["TelegramQml/PhotoSizeList 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "first"; type: "PhotoSizeObject"; isReadonly: true; isPointer: true }
        Property { name: "last"; type: "PhotoSizeObject"; isReadonly: true; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "at"
            type: "PhotoSizeObject*"
            Parameter { name: "idx"; type: "int" }
        }
    }
    Component {
        name: "PhotoSizeObject"
        prototype: "TqObject"
        exports: ["TelegramQml/PhotoSize 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "h"; type: "int" }
        Property { name: "type"; type: "string" }
        Property { name: "bytes"; type: "QByteArray" }
        Property { name: "location"; type: "FileLocationObject"; isPointer: true }
        Property { name: "size"; type: "int" }
        Property { name: "w"; type: "int" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "ProfilesModel"
        prototype: "TgAbstractListModel"
        exports: ["TelegramQml/ProfilesModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ProfilesRoles"
            values: {
                "NumberRole": 256,
                "NameRole": 257,
                "IconRole": 258,
                "MuteRole": 259,
                "ItemRole": 260
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "keys"; type: "QStringList"; isReadonly: true }
        Property { name: "configPath"; type: "string" }
        Method {
            name: "add"
            type: "ProfilesModelItem*"
            Parameter { name: "number"; type: "string" }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "number"; type: "string" }
        }
        Method {
            name: "containt"
            type: "bool"
            Parameter { name: "number"; type: "string" }
        }
        Method {
            name: "get"
            type: "ProfilesModelItem*"
            Parameter { name: "number"; type: "string" }
        }
    }
    Component {
        name: "ProfilesModelItem"
        prototype: "QObject"
        exports: ["TelegramQml/ProfilesModelItem 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "number"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string" }
        Property { name: "icon"; type: "string" }
        Property { name: "mute"; type: "bool" }
    }
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
    }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
    Component {
        name: "SendMessageActionObject"
        prototype: "TqObject"
        exports: ["TelegramQml/SendMessageAction 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "StickerPackObject"
        prototype: "QObject"
        exports: ["TelegramQml/StickerPack 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "emoticon"; type: "string" }
        Property { name: "documents"; type: "QList<qint64>" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "StickerSetObject"
        prototype: "QObject"
        exports: ["TelegramQml/StickerSet 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "id"; type: "qlonglong" }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "title"; type: "string" }
        Property { name: "shortName"; type: "string" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "StickersModel"
        prototype: "TgAbstractListModel"
        exports: ["TelegramQml/StickersModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DialogsRoles"
            values: {
                "stickerIdRole": 256,
                "documentRole": 257,
                "emoticonRole": 258,
                "stickerSetNameRole": 259,
                "stickerSetIdRole": 260,
                "stickerSetAccessHashRole": 261
            }
        }
        Property { name: "telegram"; type: "TelegramQml"; isPointer: true }
        Property { name: "currentStickerSet"; type: "string" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "initializing"; type: "bool"; isReadonly: true }
        Property { name: "installedStickerSets"; type: "QStringList"; isReadonly: true }
        Property { name: "stickerSets"; type: "QStringList"; isReadonly: true }
        Method { name: "refresh" }
        Method {
            name: "stickerSetThumbnailDocument"
            type: "DocumentObject*"
            Parameter { name: "id"; type: "string" }
        }
        Method {
            name: "stickerSetItem"
            type: "StickerSetObject*"
            Parameter { name: "id"; type: "string" }
        }
    }
    Component {
        name: "TagFilterModel"
        prototype: "TgAbstractListModel"
        exports: ["TelegramQml/TagFilterModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "TagFilterRoles"
            values: {
                "TagRole": 256
            }
        }
        Property { name: "userData"; type: "UserData"; isPointer: true }
        Property { name: "keyword"; type: "string" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method { name: "refresh" }
        Method {
            name: "get"
            type: "string"
            Parameter { name: "idx"; type: "int" }
        }
    }
    Component {
        name: "TelegramChatParticipantsModel"
        prototype: "TgAbstractListModel"
        exports: ["TelegramQml/ChatParticipantsModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DialogsRoles"
            values: {
                "ItemRole": 256
            }
        }
        Property { name: "telegram"; type: "TelegramQml"; isPointer: true }
        Property { name: "dialog"; type: "DialogObject"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "refreshing"; type: "bool"; isReadonly: true }
        Method { name: "refresh" }
    }
    Component {
        name: "TelegramContactsFilterModel"
        prototype: "QSortFilterProxyModel"
        exports: ["TelegramQml/ContactsFilterModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "searchTerm"; type: "string" }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "rowIndex"; type: "int" }
        }
    }
    Component {
        name: "TelegramContactsModel"
        prototype: "TgAbstractListModel"
        exports: ["TelegramQml/ContactsModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContactsRoles"
            values: {
                "ItemRole": 256
            }
        }
        Property { name: "telegram"; type: "TelegramQml"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "initializing"; type: "bool"; isReadonly: true }
        Method { name: "refresh" }
    }
    Component {
        name: "TelegramDetailedContactsModel"
        prototype: "TgAbstractListModel"
        exports: ["TelegramQml/DetailedContactsModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DetailedContactsRoles"
            values: {
                "ItemRole": 256,
                "IdRole": 257,
                "AccessHashRole": 258,
                "PhoneRole": 259,
                "FirstNameRole": 260,
                "LastNameRole": 261,
                "FullNameRole": 262,
                "UsernameRole": 263,
                "PhotoRole": 264,
                "StatusRole": 265
            }
        }
        Property { name: "telegram"; type: "TelegramQml"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "initializing"; type: "bool"; isReadonly: true }
        Method { name: "refresh" }
    }
    Component {
        name: "TelegramDialogsModel"
        prototype: "TgAbstractListModel"
        exports: ["TelegramQml/DialogsModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DialogsRoles"
            values: {
                "ItemRole": 256,
                "SectionRole": 257
            }
        }
        Property { name: "telegram"; type: "TelegramQml"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "initializing"; type: "bool"; isReadonly: true }
        Method { name: "refreshDatabase" }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "dialog"; type: "DialogObject"; isPointer: true }
        }
        Method {
            name: "at"
            type: "DialogObject*"
            Parameter { name: "row"; type: "int" }
        }
    }
    Component {
        name: "TelegramFileHandler"
        prototype: "QObject"
        exports: ["TelegramQml/FileHandler 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ObjectType"
            values: {
                "TypeObjectEmpty": 0,
                "TypeObjectMessage": 1,
                "TypeObjectPeer": 2,
                "TypeObjectDialog": 3,
                "TypeObjectUser": 4,
                "TypeObjectChat": 5,
                "TypeObjectFileLocation": 6,
                "TypeObjectMessageAction": 7,
                "TypeObjectMessageMedia": 8,
                "TypeObjectAudio": 9,
                "TypeObjectDocument": 10,
                "TypeObjectVideo": 11,
                "TypeObjectGeoPoint": 12,
                "TypeObjectContact": 13,
                "TypeObjectPhoto": 14,
                "TypeObjectPhotoSizeList": 15,
                "TypeObjectPhotoSize": 16,
                "TypeObjectUserProfilePhoto": 17,
                "TypeObjectChatPhoto": 18
            }
        }
        Enum {
            name: "ProgressType"
            values: {
                "TypeProgressEmpty": 0,
                "TypeProgressUpload": 1,
                "TypeProgressDownload": 2
            }
        }
        Enum {
            name: "TargetType"
            values: {
                "TypeTargetUnknown": 0,
                "TypeTargetMediaPhoto": 1,
                "TypeTargetMediaAudio": 2,
                "TypeTargetMediaVideo": 3,
                "TypeTargetMediaDocument": 4,
                "TypeTargetMediaGeoPoint": 5,
                "TypeTargetMediaContact": 6,
                "TypeTargetMediaOther": 7,
                "TypeTargetChatPhoto": 8,
                "TypeTargetUserPhoto": 9,
                "TypeTargetActionChatPhoto": 10
            }
        }
        Property { name: "telegram"; type: "TelegramQml"; isPointer: true }
        Property { name: "target"; type: "QObject"; isPointer: true }
        Property { name: "objectType"; type: "int"; isReadonly: true }
        Property { name: "targetType"; type: "int"; isReadonly: true }
        Property { name: "progressType"; type: "int"; isReadonly: true }
        Property { name: "progressTotalByte"; type: "qlonglong"; isReadonly: true }
        Property { name: "progressCurrentByte"; type: "qlonglong"; isReadonly: true }
        Property { name: "progressPercent"; type: "double"; isReadonly: true }
        Property { name: "downloaded"; type: "bool"; isReadonly: true }
        Property { name: "filePath"; type: "QUrl"; isReadonly: true }
        Property { name: "thumbPath"; type: "QUrl"; isReadonly: true }
        Property { name: "isSticker"; type: "bool"; isReadonly: true }
        Property { name: "imageSize"; type: "QSize"; isReadonly: true }
        Property { name: "fileSize"; type: "qlonglong"; isReadonly: true }
        Property { name: "fileName"; type: "string"; isReadonly: true }
        Property { name: "defaultThumbnail"; type: "QUrl" }
        Method { name: "cancelProgress"; type: "bool" }
        Method { name: "download"; type: "bool" }
    }
    Component {
        name: "TelegramMessagesModel"
        prototype: "TgAbstractListModel"
        exports: ["TelegramQml/MessagesModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "telegram"; type: "TelegramQml"; isPointer: true }
        Property { name: "dialog"; type: "DialogObject"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "initializing"; type: "bool"; isReadonly: true }
        Property { name: "refreshing"; type: "bool"; isReadonly: true }
        Property { name: "maxId"; type: "int" }
        Property { name: "hasNewMessage"; type: "bool"; isReadonly: true }
        Signal {
            name: "messageAdded"
            Parameter { name: "msgId"; type: "qlonglong" }
        }
        Signal {
            name: "focusToNewRequest"
            Parameter { name: "unreads"; type: "int" }
        }
        Method { name: "refresh" }
        Method {
            name: "loadMore"
            Parameter { name: "force"; type: "bool" }
        }
        Method { name: "loadMore" }
        Method {
            name: "sendMessage"
            Parameter { name: "msg"; type: "string" }
            Parameter { name: "inReplyTo"; type: "int" }
        }
        Method {
            name: "sendMessage"
            Parameter { name: "msg"; type: "string" }
        }
        Method { name: "setReaded" }
        Method { name: "clearNewMessageFlag" }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "msgId"; type: "qlonglong" }
        }
    }
    Component {
        name: "TelegramQml"
        prototype: "QObject"
        exports: ["TelegramQml/Telegram 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "LogLevel"
            values: {
                "LogLevelClean": 0,
                "LogLevelUseful": 1,
                "LogLevelFull": 2
            }
        }
        Property { name: "defaultHostAddress"; type: "string" }
        Property { name: "defaultHostPort"; type: "int" }
        Property { name: "defaultHostDcId"; type: "int" }
        Property { name: "appId"; type: "int" }
        Property { name: "appHash"; type: "string" }
        Property { name: "phoneNumber"; type: "string" }
        Property { name: "configPath"; type: "string" }
        Property { name: "publicKeyFile"; type: "QUrl" }
        Property { name: "downloadPath"; type: "string" }
        Property { name: "tempPath"; type: "string" }
        Property { name: "newsLetterDialog"; type: "QObject"; isPointer: true }
        Property { name: "autoAcceptEncrypted"; type: "bool" }
        Property { name: "autoCleanUpMessages"; type: "bool" }
        Property { name: "online"; type: "bool" }
        Property { name: "unreadCount"; type: "int"; isReadonly: true }
        Property { name: "totalUploadedPercent"; type: "double"; isReadonly: true }
        Property { name: "uploadingProfilePhoto"; type: "bool"; isReadonly: true }
        Property { name: "telegram"; type: "Telegram"; isReadonly: true; isPointer: true }
        Property { name: "userData"; type: "UserData"; isReadonly: true; isPointer: true }
        Property { name: "me"; type: "qlonglong"; isReadonly: true }
        Property { name: "cutegramId"; type: "qlonglong"; isReadonly: true }
        Property { name: "myUser"; type: "UserObject"; isReadonly: true; isPointer: true }
        Property { name: "homePath"; type: "string"; isReadonly: true }
        Property { name: "currentPath"; type: "string"; isReadonly: true }
        Property { name: "authNeeded"; type: "bool"; isReadonly: true }
        Property { name: "authLoggedIn"; type: "bool"; isReadonly: true }
        Property { name: "authPhoneRegistered"; type: "bool"; isReadonly: true }
        Property { name: "authPhoneInvited"; type: "bool"; isReadonly: true }
        Property { name: "authPhoneChecked"; type: "bool"; isReadonly: true }
        Property { name: "connected"; type: "bool"; isReadonly: true }
        Property { name: "authSignUpError"; type: "string"; isReadonly: true }
        Property { name: "authSignInError"; type: "string"; isReadonly: true }
        Property { name: "error"; type: "string"; isReadonly: true }
        Property { name: "nullDialog"; type: "DialogObject"; isReadonly: true; isPointer: true }
        Property { name: "nullMessage"; type: "MessageObject"; isReadonly: true; isPointer: true }
        Property { name: "nullChat"; type: "ChatObject"; isReadonly: true; isPointer: true }
        Property { name: "nullUser"; type: "UserObject"; isReadonly: true; isPointer: true }
        Property { name: "nullWallpaper"; type: "WallPaperObject"; isReadonly: true; isPointer: true }
        Property { name: "nullUpload"; type: "UploadObject"; isReadonly: true; isPointer: true }
        Property { name: "nullChatFull"; type: "ChatFullObject"; isReadonly: true; isPointer: true }
        Property { name: "nullContact"; type: "ContactObject"; isReadonly: true; isPointer: true }
        Property { name: "nullLocation"; type: "FileLocationObject"; isReadonly: true; isPointer: true }
        Property {
            name: "nullEncryptedChat"
            type: "EncryptedChatObject"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "nullEncryptedMessage"
            type: "EncryptedMessageObject"
            isReadonly: true
            isPointer: true
        }
        Property { name: "nullSticker"; type: "DocumentObject"; isReadonly: true; isPointer: true }
        Property { name: "nullStickerSet"; type: "StickerSetObject"; isReadonly: true; isPointer: true }
        Property { name: "nullStickerPack"; type: "StickerPackObject"; isReadonly: true; isPointer: true }
        Signal {
            name: "dialogsChanged"
            Parameter { name: "cachedData"; type: "bool" }
        }
        Signal {
            name: "messagesChanged"
            Parameter { name: "cachedData"; type: "bool" }
        }
        Signal { name: "usersChanged" }
        Signal { name: "chatsChanged" }
        Signal { name: "wallpapersChanged" }
        Signal { name: "uploadsChanged" }
        Signal { name: "chatFullsChanged" }
        Signal { name: "contactsChanged" }
        Signal { name: "autoUpdateChanged" }
        Signal { name: "encryptedChatsChanged" }
        Signal { name: "installedStickersChanged" }
        Signal { name: "stickersChanged" }
        Signal {
            name: "stickerRecieved"
            Parameter { name: "id"; type: "qlonglong" }
        }
        Signal { name: "invisibleChanged" }
        Signal {
            name: "phoneChecked"
            Parameter { name: "phone"; type: "string" }
            Parameter { name: "phoneRegistered"; type: "bool" }
        }
        Signal { name: "authPasswordProtectedError" }
        Signal {
            name: "authCodeRequested"
            Parameter { name: "phoneRegistered"; type: "bool" }
            Parameter { name: "sendCallTimeout"; type: "int" }
        }
        Signal {
            name: "authCallRequested"
            Parameter { name: "ok"; type: "bool" }
        }
        Signal {
            name: "authInvitesSent"
            Parameter { name: "ok"; type: "bool" }
        }
        Signal {
            name: "accountUsernameChecked"
            Parameter { name: "ok"; type: "bool" }
        }
        Signal {
            name: "userBecomeOnline"
            Parameter { name: "userId"; type: "qlonglong" }
        }
        Signal {
            name: "userStartTyping"
            Parameter { name: "userId"; type: "qlonglong" }
            Parameter { name: "dId"; type: "qlonglong" }
        }
        Signal {
            name: "contactsImportedContacts"
            Parameter { name: "importedCount"; type: "int" }
            Parameter { name: "retryCount"; type: "int" }
        }
        Signal {
            name: "helpGetInviteTextAnswer"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "message"; type: "string" }
        }
        Signal { name: "fakeSignal" }
        Signal {
            name: "incomingMessage"
            Parameter { name: "msg"; type: "MessageObject"; isPointer: true }
        }
        Signal {
            name: "incomingEncryptedMessage"
            Parameter { name: "msg"; type: "EncryptedMessageObject"; isPointer: true }
        }
        Signal {
            name: "searchDone"
            Parameter { name: "messages"; type: "QList<qint64>" }
        }
        Signal {
            name: "contactsFounded"
            Parameter { name: "contacts"; type: "QList<qint32>" }
        }
        Signal {
            name: "errorSignal"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "errorCode"; type: "int" }
            Parameter { name: "functionName"; type: "string" }
            Parameter { name: "errorText"; type: "string" }
        }
        Method { name: "authLogout" }
        Method { name: "authResetAuthorizations" }
        Method { name: "authSendCall" }
        Method { name: "authSendCode" }
        Method {
            name: "authSendInvites"
            Parameter { name: "phoneNumbers"; type: "QStringList" }
            Parameter { name: "inviteText"; type: "string" }
        }
        Method {
            name: "authSignIn"
            Parameter { name: "code"; type: "string" }
        }
        Method {
            name: "authSignUp"
            Parameter { name: "code"; type: "string" }
            Parameter { name: "firstName"; type: "string" }
            Parameter { name: "lastName"; type: "string" }
        }
        Method {
            name: "accountRegisterDevice"
            Parameter { name: "token"; type: "string" }
            Parameter { name: "appVersion"; type: "string" }
        }
        Method {
            name: "accountRegisterDevice"
            Parameter { name: "token"; type: "string" }
        }
        Method {
            name: "accountUnregisterDevice"
            Parameter { name: "token"; type: "string" }
        }
        Method {
            name: "accountUpdateProfile"
            Parameter { name: "firstName"; type: "string" }
            Parameter { name: "lastName"; type: "string" }
        }
        Method {
            name: "accountCheckUsername"
            Parameter { name: "username"; type: "string" }
        }
        Method {
            name: "accountUpdateUsername"
            Parameter { name: "username"; type: "string" }
        }
        Method {
            name: "sendMessage"
            Parameter { name: "dialogId"; type: "qlonglong" }
            Parameter { name: "msg"; type: "string" }
            Parameter { name: "replyTo"; type: "int" }
        }
        Method {
            name: "sendMessage"
            Parameter { name: "dialogId"; type: "qlonglong" }
            Parameter { name: "msg"; type: "string" }
        }
        Method {
            name: "sendMessageAsDocument"
            type: "bool"
            Parameter { name: "dialogId"; type: "qlonglong" }
            Parameter { name: "msg"; type: "string" }
        }
        Method {
            name: "sendGeo"
            Parameter { name: "dialogId"; type: "qlonglong" }
            Parameter { name: "latitude"; type: "double" }
            Parameter { name: "longitude"; type: "double" }
            Parameter { name: "replyTo"; type: "int" }
        }
        Method {
            name: "sendGeo"
            Parameter { name: "dialogId"; type: "qlonglong" }
            Parameter { name: "latitude"; type: "double" }
            Parameter { name: "longitude"; type: "double" }
        }
        Method {
            name: "forwardDocument"
            Parameter { name: "dialogId"; type: "qlonglong" }
            Parameter { name: "doc"; type: "DocumentObject"; isPointer: true }
        }
        Method {
            name: "addContact"
            Parameter { name: "firstName"; type: "string" }
            Parameter { name: "lastName"; type: "string" }
            Parameter { name: "phoneNumber"; type: "string" }
        }
        Method {
            name: "addContacts"
            Parameter { name: "vcontacts"; type: "QVariantList" }
        }
        Method {
            name: "forwardMessages"
            Parameter { name: "msgIds"; type: "QList<int>" }
            Parameter { name: "peerId"; type: "qlonglong" }
        }
        Method {
            name: "deleteMessages"
            Parameter { name: "msgIds"; type: "QList<int>" }
        }
        Method { name: "deleteCutegramDialog" }
        Method {
            name: "messagesCreateChat"
            Parameter { name: "users"; type: "QList<int>" }
            Parameter { name: "topic"; type: "string" }
        }
        Method {
            name: "messagesAddChatUser"
            Parameter { name: "chatId"; type: "qlonglong" }
            Parameter { name: "userId"; type: "qlonglong" }
            Parameter { name: "fwdLimit"; type: "int" }
        }
        Method {
            name: "messagesAddChatUser"
            Parameter { name: "chatId"; type: "qlonglong" }
            Parameter { name: "userId"; type: "qlonglong" }
        }
        Method {
            name: "messagesDeleteChatUser"
            Parameter { name: "chatId"; type: "qlonglong" }
            Parameter { name: "userId"; type: "qlonglong" }
        }
        Method {
            name: "messagesEditChatTitle"
            Parameter { name: "chatId"; type: "int" }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "messagesEditChatPhoto"
            Parameter { name: "chatId"; type: "int" }
            Parameter { name: "filePath"; type: "string" }
        }
        Method {
            name: "messagesDeleteHistory"
            Parameter { name: "peerId"; type: "qlonglong" }
        }
        Method {
            name: "messagesSetTyping"
            Parameter { name: "peerId"; type: "qlonglong" }
            Parameter { name: "stt"; type: "bool" }
        }
        Method {
            name: "messagesReadHistory"
            Parameter { name: "peerId"; type: "qlonglong" }
            Parameter { name: "maxDate"; type: "int" }
        }
        Method {
            name: "messagesReadHistory"
            Parameter { name: "peerId"; type: "qlonglong" }
        }
        Method {
            name: "messagesCreateEncryptedChat"
            Parameter { name: "userId"; type: "qlonglong" }
        }
        Method {
            name: "messagesAcceptEncryptedChat"
            Parameter { name: "chatId"; type: "int" }
        }
        Method {
            name: "messagesDiscardEncryptedChat"
            Parameter { name: "chatId"; type: "int" }
        }
        Method {
            name: "messagesGetFullChat"
            Parameter { name: "chatId"; type: "int" }
        }
        Method {
            name: "installStickerSet"
            Parameter { name: "shortName"; type: "string" }
        }
        Method {
            name: "uninstallStickerSet"
            Parameter { name: "shortName"; type: "string" }
        }
        Method {
            name: "getStickerSet"
            Parameter { name: "shortName"; type: "string" }
        }
        Method {
            name: "search"
            Parameter { name: "keyword"; type: "string" }
        }
        Method {
            name: "searchContact"
            Parameter { name: "keyword"; type: "string" }
        }
        Method {
            name: "sendFile"
            type: "bool"
            Parameter { name: "dialogId"; type: "qlonglong" }
            Parameter { name: "file"; type: "string" }
            Parameter { name: "forceDocument"; type: "bool" }
            Parameter { name: "forceAudio"; type: "bool" }
        }
        Method {
            name: "sendFile"
            type: "bool"
            Parameter { name: "dialogId"; type: "qlonglong" }
            Parameter { name: "file"; type: "string" }
            Parameter { name: "forceDocument"; type: "bool" }
        }
        Method {
            name: "sendFile"
            type: "bool"
            Parameter { name: "dialogId"; type: "qlonglong" }
            Parameter { name: "file"; type: "string" }
        }
        Method {
            name: "getFile"
            Parameter { name: "location"; type: "FileLocationObject"; isPointer: true }
            Parameter { name: "type"; type: "qlonglong" }
            Parameter { name: "fileSize"; type: "int" }
        }
        Method {
            name: "getFile"
            Parameter { name: "location"; type: "FileLocationObject"; isPointer: true }
            Parameter { name: "type"; type: "qlonglong" }
        }
        Method {
            name: "getFile"
            Parameter { name: "location"; type: "FileLocationObject"; isPointer: true }
        }
        Method {
            name: "getFileJustCheck"
            Parameter { name: "location"; type: "FileLocationObject"; isPointer: true }
        }
        Method {
            name: "cancelDownload"
            Parameter { name: "download"; type: "DownloadObject"; isPointer: true }
        }
        Method {
            name: "cancelSendGet"
            Parameter { name: "fileId"; type: "qlonglong" }
        }
        Method {
            name: "setProfilePhoto"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "timerUpdateDialogs"
            Parameter { name: "duration"; type: "int" }
        }
        Method { name: "timerUpdateDialogs" }
        Method {
            name: "timerUpdateContacts"
            Parameter { name: "duration"; type: "int" }
        }
        Method { name: "timerUpdateContacts" }
        Method { name: "cleanUpMessages" }
        Method { name: "updatesGetState" }
        Method { name: "updatesGetDifference" }
        Method {
            name: "setLogLevel"
            Parameter { name: "level"; type: "int" }
        }
        Method {
            name: "authCheckPhone"
            Parameter { name: "phone"; type: "string" }
        }
        Method {
            name: "mute"
            Parameter { name: "peerId"; type: "qlonglong" }
        }
        Method {
            name: "unmute"
            Parameter { name: "peerId"; type: "qlonglong" }
        }
        Method {
            name: "helpGetInviteText"
            Parameter { name: "langCode"; type: "string" }
        }
        Method {
            name: "dialog"
            type: "DialogObject*"
            Parameter { name: "id"; type: "qlonglong" }
        }
        Method {
            name: "message"
            type: "MessageObject*"
            Parameter { name: "id"; type: "qlonglong" }
        }
        Method {
            name: "chat"
            type: "ChatObject*"
            Parameter { name: "id"; type: "qlonglong" }
        }
        Method {
            name: "user"
            type: "UserObject*"
            Parameter { name: "id"; type: "qlonglong" }
        }
        Method {
            name: "messageDialogId"
            type: "qlonglong"
            Parameter { name: "id"; type: "qlonglong" }
        }
        Method {
            name: "messageDialog"
            type: "DialogObject*"
            Parameter { name: "id"; type: "qlonglong" }
        }
        Method {
            name: "wallpaper"
            type: "WallPaperObject*"
            Parameter { name: "id"; type: "qlonglong" }
        }
        Method {
            name: "upload"
            type: "MessageObject*"
            Parameter { name: "id"; type: "qlonglong" }
        }
        Method {
            name: "chatFull"
            type: "ChatFullObject*"
            Parameter { name: "id"; type: "qlonglong" }
        }
        Method {
            name: "contact"
            type: "ContactObject*"
            Parameter { name: "id"; type: "qlonglong" }
        }
        Method {
            name: "encryptedChat"
            type: "EncryptedChatObject*"
            Parameter { name: "id"; type: "qlonglong" }
        }
        Method {
            name: "sticker"
            type: "DocumentObject*"
            Parameter { name: "id"; type: "qlonglong" }
        }
        Method {
            name: "stickerSet"
            type: "StickerSetObject*"
            Parameter { name: "id"; type: "qlonglong" }
        }
        Method {
            name: "stickerPack"
            type: "StickerPackObject*"
            Parameter { name: "id"; type: "string" }
        }
        Method {
            name: "locationOf"
            type: "FileLocationObject*"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "dcId"; type: "qlonglong" }
            Parameter { name: "accessHash"; type: "qlonglong" }
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "locationOfDocument"
            type: "FileLocationObject*"
            Parameter { name: "doc"; type: "DocumentObject"; isPointer: true }
        }
        Method {
            name: "locationOfVideo"
            type: "FileLocationObject*"
            Parameter { name: "vid"; type: "VideoObject"; isPointer: true }
        }
        Method {
            name: "locationOfAudio"
            type: "FileLocationObject*"
            Parameter { name: "aud"; type: "AudioObject"; isPointer: true }
        }
        Method {
            name: "documentIsSticker"
            type: "bool"
            Parameter { name: "doc"; type: "DocumentObject"; isPointer: true }
        }
        Method {
            name: "documentFileName"
            type: "string"
            Parameter { name: "doc"; type: "DocumentObject"; isPointer: true }
        }
        Method {
            name: "fakeDialogObject"
            type: "DialogObject*"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "isChat"; type: "bool" }
        }
        Method {
            name: "fileLocation"
            type: "string"
            Parameter { name: "location"; type: "FileLocationObject"; isPointer: true }
        }
        Method {
            name: "videoThumbLocation"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "audioThumbLocation"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
    }
    Component {
        name: "TelegramSearchModel"
        prototype: "TgAbstractListModel"
        exports: ["TelegramQml/SearchModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SearchsRoles"
            values: {
                "ItemRole": 256
            }
        }
        Property { name: "telegram"; type: "TelegramQml"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "initializing"; type: "bool"; isReadonly: true }
        Property { name: "keyword"; type: "string" }
        Method { name: "refresh" }
    }
    Component {
        name: "TelegramUploadsModel"
        prototype: "TgAbstractListModel"
        exports: ["TelegramQml/UploadsModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "UploadsRoles"
            values: {
                "ItemRole": 256
            }
        }
        Property { name: "telegram"; type: "TelegramQml"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
    }
    Component {
        name: "TelegramWallpapersModel"
        prototype: "TgAbstractListModel"
        exports: ["TelegramQml/WallpapersModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "WallpapersRoles"
            values: {
                "ItemRole": 256
            }
        }
        Property { name: "telegram"; type: "TelegramQml"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "initializing"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "TgAbstractListModel"
        prototype: "QAbstractListModel"
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "get"
            type: "QVariantMap"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "roles"; type: "QStringList" }
    }
    Component { name: "TqObject"; prototype: "QObject" }
    Component {
        name: "UploadObject"
        prototype: "TqObject"
        exports: ["TelegramQml/Upload 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "fileId"; type: "qlonglong" }
        Property { name: "location"; type: "string" }
        Property { name: "partId"; type: "int" }
        Property { name: "uploaded"; type: "int" }
        Property { name: "totalSize"; type: "int" }
        Signal { name: "changed" }
    }
    Component {
        name: "UserData"
        prototype: "QObject"
        exports: ["TelegramQml/UserData 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "NotifyTypes"
            values: {
                "NotifyDisabled": 0,
                "NotifyOnline": 1,
                "NotifyTyping": 2,
                "DisableBadges": 4
            }
        }
        Property { name: "phoneNumber"; type: "string" }
        Property { name: "configPath"; type: "string" }
        Signal {
            name: "muteChanged"
            Parameter { name: "id"; type: "int" }
        }
        Signal {
            name: "favoriteChanged"
            Parameter { name: "id"; type: "int" }
        }
        Signal {
            name: "loadLinkChanged"
            Parameter { name: "id"; type: "int" }
        }
        Signal {
            name: "tagsChanged"
            Parameter { name: "tag"; type: "string" }
        }
        Signal {
            name: "valueChanged"
            Parameter { name: "key"; type: "string" }
        }
        Signal {
            name: "messageUpdateChanged"
            Parameter { name: "id"; type: "int" }
        }
        Signal {
            name: "notifyChanged"
            Parameter { name: "id"; type: "int" }
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setPushToken"
            Parameter { name: "token"; type: "string" }
        }
        Method { name: "pushToken"; type: "string" }
        Method {
            name: "addMute"
            Parameter { name: "id"; type: "int" }
        }
        Method {
            name: "removeMute"
            Parameter { name: "id"; type: "int" }
        }
        Method { name: "mutes"; type: "QList<int>" }
        Method {
            name: "isMuted"
            type: "bool"
            Parameter { name: "id"; type: "int" }
        }
        Method {
            name: "addFavorite"
            Parameter { name: "id"; type: "int" }
        }
        Method {
            name: "removeFavorite"
            Parameter { name: "id"; type: "int" }
        }
        Method { name: "favorites"; type: "QList<int>" }
        Method {
            name: "isFavorited"
            type: "bool"
            Parameter { name: "id"; type: "int" }
        }
        Method {
            name: "addLoadLink"
            Parameter { name: "id"; type: "int" }
        }
        Method {
            name: "removeLoadlink"
            Parameter { name: "id"; type: "int" }
        }
        Method { name: "loadLinks"; type: "QList<int>" }
        Method {
            name: "isLoadLink"
            type: "bool"
            Parameter { name: "id"; type: "int" }
        }
        Method {
            name: "setNotify"
            Parameter { name: "id"; type: "int" }
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "notify"
            type: "int"
            Parameter { name: "id"; type: "int" }
        }
        Method {
            name: "addTag"
            Parameter { name: "tag"; type: "string" }
        }
        Method { name: "tags"; type: "QStringList" }
        Method {
            name: "addMessageUpdate"
            Parameter { name: "msg"; type: "MessageUpdate" }
        }
        Method {
            name: "removeMessageUpdate"
            Parameter { name: "id"; type: "int" }
        }
        Method { name: "messageUpdates"; type: "QList<quint64>" }
        Method {
            name: "messageUpdateItem"
            type: "MessageUpdate"
            Parameter { name: "id"; type: "int" }
        }
        Method {
            name: "setValue"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "value"
            type: "string"
            Parameter { name: "key"; type: "string" }
        }
        Method { name: "reconnect" }
        Method { name: "disconnect" }
    }
    Component {
        name: "UserNameFilterModel"
        prototype: "TgAbstractListModel"
        exports: ["TelegramQml/UserNameFilterModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FilterRoles"
            values: {
                "UserIdRole": 256
            }
        }
        Property { name: "telegram"; type: "TelegramQml"; isPointer: true }
        Property { name: "dialog"; type: "DialogObject"; isPointer: true }
        Property { name: "keyword"; type: "string" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method { name: "refresh" }
        Method {
            name: "get"
            type: "qlonglong"
            Parameter { name: "idx"; type: "int" }
        }
    }
    Component {
        name: "UserObject"
        prototype: "TqObject"
        exports: ["TelegramQml/User 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "id"; type: "int" }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "phone"; type: "string" }
        Property { name: "firstName"; type: "string" }
        Property { name: "photo"; type: "UserProfilePhotoObject"; isPointer: true }
        Property { name: "status"; type: "UserStatusObject"; isPointer: true }
        Property { name: "lastName"; type: "string" }
        Property { name: "username"; type: "string" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
        Signal { name: "inactiveChanged" }
    }
    Component {
        name: "UserProfilePhotoObject"
        prototype: "TqObject"
        exports: ["TelegramQml/UserProfilePhoto 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "photoId"; type: "qlonglong" }
        Property { name: "photoBig"; type: "FileLocationObject"; isPointer: true }
        Property { name: "photoSmall"; type: "FileLocationObject"; isPointer: true }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "UserStatusObject"
        prototype: "TqObject"
        exports: ["TelegramQml/UserStatus 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "wasOnline"; type: "int" }
        Property { name: "expires"; type: "int" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "VideoObject"
        prototype: "TqObject"
        exports: ["TelegramQml/Video 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "id"; type: "qlonglong" }
        Property { name: "dcId"; type: "int" }
        Property { name: "date"; type: "int" }
        Property { name: "thumb"; type: "PhotoSizeObject"; isPointer: true }
        Property { name: "duration"; type: "int" }
        Property { name: "h"; type: "int" }
        Property { name: "size"; type: "int" }
        Property { name: "accessHash"; type: "qlonglong" }
        Property { name: "userId"; type: "int" }
        Property { name: "w"; type: "int" }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
    Component {
        name: "WallPaperObject"
        prototype: "TqObject"
        exports: ["TelegramQml/WallPaper 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "bgColor"; type: "int" }
        Property { name: "color"; type: "int" }
        Property { name: "id"; type: "int" }
        Property { name: "title"; type: "string" }
        Property { name: "sizes"; type: "PhotoSizeList"; isPointer: true }
        Property { name: "classType"; type: "uint" }
        Signal { name: "changed" }
    }
}
